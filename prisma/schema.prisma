generator client {
    provider      = "prisma-client-js"
    output        = "../node_modules/.prisma/client"
    binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

generator nexus {
    provider = "ts-node ./prisma-nexus-generator/src/index.ts"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model ActiveEventInstance {
    id               Int             @id @default(autoincrement()) @map("ID")
    devId            Int?            @map("DevID")
    eventClassId     Int?            @map("EventClassID")
    timestampAppears DateTime?       @map("TimestampAPPEARS") @db.Timestamp(3)
    userId           Int?            @map("UserID")
    x1               Decimal?        @map("X_1") @db.Decimal(65, 5)
    x2               Decimal?        @map("X_2") @db.Decimal(65, 5)
    x3               Decimal?        @map("X_3") @db.Decimal(65, 5)
    x4               Decimal?        @map("X_4") @db.Decimal(65, 5)
    deviceInstance   DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
    eventClass       EventClass?     @relation(fields: [eventClassId], references: [id], onDelete: Cascade)
    user             User?           @relation(fields: [userId], references: [id], onDelete: NoAction)

    @@index([devId], map: "DevID")
    @@index([eventClassId], map: "EventClassID")
    @@index([userId], map: "UserID")
    @@map("ActiveEventInstances")
}

model DatabaseStatus {
    id        Int                   @id @default(autoincrement()) @map("ID")
    status    DatabaseStatusStatus? @map("Status")
    timestamp DateTime              @default(now()) @map("Timestamp") @db.Timestamp(0)

    @@map("DB_Status")
}

model DeviceIndexDataType {
    id   Int     @id @default(autoincrement()) @map("ID")
    name String? @default("") @map("Name") @db.Char(32)

    @@map("DataTypes")
}

model DeviceClass {
    id                      Int                      @id @default(autoincrement()) @map("ID")
    deviceId                Int?                     @map("DeviceID")
    vendorId                BigInt?                  @map("VendorID") @db.UnsignedBigInt
    pictureFileName         String?                  @map("PictureFileName") @db.Char(255)
    productId               String?                  @map("ProductID") @db.Char(255)
    productName             String?                  @map("ProductName") @db.Char(255)
    deviceType              String?                  @map("DeviceType") @db.Char(32)
    deviceSubType           String?                  @map("DeviceSubType") @db.Char(32)
    description             String?                  @map("Description") @db.Text
    iconFileName            String?                  @map("IconFileName") @db.Char(255)
    pDbitLengthIn           Int?                     @map("PDbitLengthIn")
    pDbitLengthOut          Int?                     @map("PDbitLengthOut")
    allowFirmwareUpload     Boolean                  @default(false) @map("AllowFirmwareUpload")
    catalog                 Boolean                  @default(false) @map("Catalog")
    mappedIndices           Json?                    @map("MappedIndices")
    firmwareVersion         String?                  @map("FirmwareVersion") @db.Char(255)
    vendor                  Vendor?                  @relation(fields: [vendorId], references: [id], onDelete: NoAction)
    deviceFiles             DeviceFile[]
    deviceInstances         DeviceInstance[]
    eventClasses            EventClass[]
    mainDeviceClasses       MainDeviceClass[]
    maintenanceTypes        MaintenanceType[]
    predictionConfigs       PredictionConfig[]
    maintenanceConfigs      MaintenanceConfig[]
    maintenanceAlarmConfigs MaintenanceAlarmConfig[]

    @@index([vendorId], map: "VendorID")
    @@map("DeviceClasses")
}

model DeviceControl {
    id                     Int             @id @default(autoincrement()) @map("ID")
    devId                  Int?            @unique(map: "DevID") @map("DevID")
    DeviceIndexDataTypeId  Int?            @map("DataTypeID")
    bitLength              Int?            @map("BitLength")
    index                  Int?            @map("Index")
    subindex               Int?            @map("Subindex")
    dynamic                Boolean?        @map("Dynamic")
    modifiesOtherVariables Boolean?        @map("ModifiesOtherVariables")
    mqttName               String?         @map("MQTTName") @db.Char(64)
    subtopicId             Int?            @map("SubtopicID")
    parameterId            String?         @map("ParameterID") @db.Char(64)
    mqttLabel              String?         @map("MQTTLabel") @db.Text
    label                  String?         @map("Label") @db.Text
    range                  String?         @map("Range") @db.Text
    access                 String?         @map("Access") @db.Char(32)
    remark                 String?         @map("Remark") @db.Text
    parameterDescriptor    String?         @map("ParameterDescriptor") @db.Text
    parameterGroup         String?         @map("ParameterGroup") @db.Char(255)
    successStatus          Boolean?        @map("SuccessStatus")
    lastSuccessDate        DateTime?       @map("LastSuccessDate") @db.Timestamp(0)
    value                  String?         @map("Value") @db.Text
    defaultValue           String?         @map("DefaultValue") @db.Text
    resolution             String?         @map("Resolution") @db.Char(16)
    deviceInstance         DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
}

model DeviceCycle {
    id                Int             @id @default(autoincrement()) @map("ID")
    devId             Int?            @unique(map: "DevID") @map("DevID")
    globalCyclesStart Int?            @map("GlobalCyclesStart")
    globalCyclesEnd   Int?            @map("GlobalCyclesEnd")
    timestampStart    DateTime?       @map("TimestampStart") @db.Timestamp(3)
    timestampEnd      DateTime?       @map("TimestampEnd") @db.Timestamp(3)
    timestamp         DateTime        @default(now()) @map("Timestamp") @db.Timestamp(3)
    deviceInstance    DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@map("DeviceCycles")
}

model DeviceFile {
    id            Int          @id @default(autoincrement()) @map("ID")
    vendorId      BigInt?      @map("VendorID") @db.UnsignedBigInt
    deviceId      Int?         @map("DeviceID")
    filetype      String?      @map("Filetype") @db.Char(128)
    filename      String?      @map("Filename") @db.Char(255)
    revision      Float?
    deviceClassId Int?         @map("DeviceClassID")
    updatedAt     DateTime     @default(now()) @map("UpdatedAt") @db.Timestamp(0)
    deviceClass   DeviceClass? @relation(fields: [deviceClassId], references: [id], onDelete: Cascade)

    @@unique([deviceClassId, filetype], map: "DeviceClassID")
    @@map("DeviceFiles")
}

model DeviceInstance {
    /// @zod.nullish()
    id                           Int                           @id @default(autoincrement()) @map("ID")
    name                         String?                       @map("Name") @db.Char(64)
    parentDevId                  Int?                          @map("ParentDevID")
    ancestorMainDevId            Int?                          @map("AncestorMainDevID")
    deviceClassId                Int?                          @map("DeviceClassID")
    subinterface                 String?                       @map("Subinterface") @db.Char(32)
    regStatusId                  Int?                          @default(2) @map("RegStatusID")
    deviceDescription            Json?                         @map("DeviceDescription")
    connectionState              Boolean?                      @map("ConnectionState")
    manuallyDeactivated          Boolean                       @default(false) @map("ManuallyDeactivated")
    active                       Boolean                       @default(true) @map("Active")
    articleNumber                String?                       @map("ArticleNumber") @db.Char(64)
    serialNumber                 String?                       @map("SerialNumber") @db.Char(64)
    shortName                    String?                       @map("ShortName") @db.Char(10)
    customPictureFileName        String?                       @map("CustomPictureFileName") @db.Char(255)
    kpi                          Json?                         @map("KPI")
    oeeConfig                    Json?                         @map("OEEConfig")
    appLink                      Json?                         @map("AppLink")
    eventMap                     Json?                         @map("EventMap")
    allowDelete                  Boolean                       @default(true)
    exportCloud                  Boolean                       @default(false) @map("ExportCloud")
    hidden                       Boolean                       @default(false) @map("Hidden")
    isRelayed                    Boolean                       @default(false) @map("IsRelayed")
    /// @zod.nullish()
    createdOn                    DateTime                      @default(now()) @map("CreatedOn") @db.Timestamp(0)
    geolocation                  Json?                         @map("Geolocation")
    uniqueId                     String?                       @map("UID") @db.Char(52)
    userId                       Int?                          @map("UserID")
    eventStart                   DateTime?                     @map("EventStart") @db.Timestamp(0)
    eventEnd                     DateTime?                     @map("EventEnd") @db.Timestamp(0)
    deviceClasses                DeviceClass?                  @relation(fields: [deviceClassId], references: [id], onDelete: Cascade)
    locationTag                  String?                       @map("LocationTag") @db.Char(255)
    locationPos                  String?                       @map("LocationPos") @db.Char(255)
    locationAssetId              String?                       @map("AssetID") @db.Char(255)
    preservedChunks              String?                       @default("") @db.Text
    deviceInstance               DeviceInstance?               @relation("DeviceInstancesToDeviceInstances_ParentDevID", fields: [parentDevId], references: [id], onDelete: Cascade)
    registrationStatus           RegistrationStatus?           @relation(fields: [regStatusId], references: [id], onDelete: Cascade)
    user                         User?                         @relation(fields: [userId], references: [id])
    activeEventInstances         ActiveEventInstance[]
    deviceControl                DeviceControl?
    deviceCycle                  DeviceCycle?
    otherDeviceInstances         DeviceInstance[]              @relation("DeviceInstancesToDeviceInstances_ParentDevID")
    eventGroupData               EventGroupData[]
    eventGroupDataHourAggregates EventGroupDataHourAggregate[]
    eventGroupValues             EventGroupValue[]
    eventGroups                  EventGroup[]
    eventInstances               EventInstance[]
    devicedata                   DeviceData[]
    mainDeviceInstance           MainDeviceInstance?
    maintenances                 Maintenance[]
    performanceIndicatorConfig   PerformanceIndicatorConfig?
    processData                  ProcessData[]
    processDataModes             ProcessDataMode[]
    replayConfig                 ReplayConfig?
    replaySets                   ReplaySet[]
    reporting                    Reporting[]
    reportingConfig              ReportingConfig?
    timeseries                   Timeseries[]
    timeseriesData               TimeseriesData[]
    timeseriesDataHourAggregates TimeseriesDataHourAggregate[]
    updaterConfig                UpdaterConfig?
    xConfig                      XConfig?
    tasks                        Task[]

    @@index([deviceClassId], map: "DeviceClassID")
    @@index([parentDevId], map: "ParentDevID")
    @@index([regStatusId], map: "RegStatusID")
    @@index([userId], map: "UserID")
    @@map("DeviceInstances")
}

model EtcHost {
    url       String @unique(map: "URL") @map("URL") @db.VarChar(512)
    ipAddress String @unique(map: "IPAddress") @map("IPAddress") @db.Char(15)

    @@map("EtcHosts")
}

model EventClass {
    id                      Int                      @id @default(autoincrement()) @map("ID")
    deviceClassId           Int?                     @map("DeviceClassID")
    code                    BigInt?                  @map("Code")
    eventTypesId            Int?                     @map("EventTypesID")
    name                    String?                  @map("Name") @db.Text
    remark                  String?                  @map("Remark") @db.Text
    description             String?                  @map("Description") @db.Text
    cause                   String?                  @map("Cause") @db.Text
    impact                  String?                  @map("Impact") @db.Text
    solution                String?                  @map("Solution") @db.Text
    source                  String?                  @default("") @map("Source") @db.Char(64)
    deviceClass             DeviceClass?             @relation(fields: [deviceClassId], references: [id], onDelete: Cascade)
    eventType               EventType?               @relation(fields: [eventTypesId], references: [id], onDelete: Cascade)
    activeEventInstances    ActiveEventInstance[]
    eventInstances          EventInstance[]
    replaySets              ReplaySet[]
    maintenanceAlarmConfigs MaintenanceAlarmConfig[]

    @@unique([deviceClassId, code], map: "DeviceClassID")
    @@index([eventTypesId], map: "EventTypesID")
    @@map("EventClasses")
}

model EventGroupCode {
    id           Int         @id @default(autoincrement()) @map("ID")
    eventGroupId Int?        @map("EventGroupID")
    eventCode    Int?        @map("EventCode")
    eventClassId Int?        @map("EventClassID")
    label        String?     @map("Label") @db.Char(255)
    eventGroup   EventGroup? @relation(fields: [eventGroupId], references: [id], onDelete: Cascade)

    @@index([eventGroupId], map: "EventGroupID")
    @@map("EventGroupCodes")
}

model EventGroupData {
    id             Int             @id @default(autoincrement()) @map("ID")
    devId          Int?            @map("DevID")
    eventGroupId   Int?            @map("EventGroupID")
    label          String?         @map("Label") @db.Char(255)
    timestampStart DateTime        @default(now()) @map("TimestampStart") @db.Timestamp(3)
    code           Int?            @map("Code")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
    eventGroup     EventGroup?     @relation(fields: [eventGroupId], references: [id], onDelete: Cascade)

    @@index([eventGroupId], map: "EventGroupID")
    @@index([devId, eventGroupId, timestampStart], map: "mult_col_idx_DevID_EventGroupID")
}

model EventGroupDataHourAggregate {
    id             Int             @id @default(autoincrement()) @map("ID")
    timestamp      DateTime        @default(now()) @map("Timestamp") @db.Timestamp(0)
    devId          Int?            @map("DevID")
    eventGroupId   Int?            @map("EventGroupID")
    label          String          @map("Label") @db.Char(255)
    code           Int?            @map("Code")
    sum            Int?            @map("Sum")
    min            Int?            @map("Min")
    max            Int?            @map("Max")
    average        Decimal?        @map("Average") @db.Decimal(65, 2)
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@index([devId], map: "DevID")
    @@map("EventGroupDataHourAggregates")
}

model EventGroupValue {
    id              Int             @id @default(autoincrement()) @map("ID")
    devId           Int?            @map("DevID")
    eventGroupName  String          @map("EventGroupName") @db.Char(255)
    label           String?         @map("Label") @db.Char(255)
    eventGroupValue String          @map("EventGroupValue") @db.Char(255)
    code            Int?            @map("Code")
    timestamp       DateTime        @default(now()) @map("Timestamp") @db.Timestamp(0)
    deviceInstance  DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@index([devId], map: "DevID")
    @@map("EventGroupValues")
}

model EventGroup {
    id              Int              @id @default(autoincrement()) @map("ID")
    devId           Int?             @map("DevID")
    groupName       String?          @map("GroupName") @db.Char(255)
    computed        Json?            @map("Computed")
    deviceInstance  DeviceInstance?  @relation(fields: [devId], references: [id], onDelete: Cascade)
    eventGroupCodes EventGroupCode[]
    eventGroupData  EventGroupData[]

    @@index([devId], map: "DevID")
    @@map("EventGroups")
}

model EventInstance {
    id                  Int             @id @default(autoincrement()) @map("ID")
    devId               Int?            @map("DevID")
    eventClassId        Int?            @map("EventClassID")
    timestampAppears    DateTime?       @map("TimestampAPPEARS") @db.Timestamp(3)
    timestampDisappears DateTime?       @map("TimestampDISAPPEARS") @db.Timestamp(3)
    userId              Int?            @map("UserID")
    x1                  Decimal?        @map("X_1") @db.Decimal(65, 5)
    x2                  Decimal?        @map("X_2") @db.Decimal(65, 5)
    x3                  Decimal?        @map("X_3") @db.Decimal(65, 5)
    x4                  Decimal?        @map("X_4") @db.Decimal(65, 5)
    deviceInstance      DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
    eventClass          EventClass?     @relation(fields: [eventClassId], references: [id], onDelete: Cascade)
    user                User?           @relation(fields: [userId], references: [id], onDelete: NoAction)

    @@index([devId], map: "DevID")
    @@index([eventClassId], map: "EventClassID")
    @@index([userId], map: "UserID")
    @@map("EventInstances")
}

model EventType {
    id              Int          @id @default(autoincrement()) @map("ID")
    type            String?      @map("Type") @db.Char(64)
    deviceCondition Int?         @map("DeviceCondition")
    eventClasses    EventClass[]

    @@map("EventTypes")
}

model FloorPlan {
    id                  Int                  @id @default(autoincrement()) @map("ID")
    name                String?              @default("") @map("Name") @db.Char(128)
    file                String               @unique(map: "File") @map("File") @db.Char(255)
    mainDeviceInstances MainDeviceInstance[]

    @@map("FloorPlans")
}

model DeviceData {
    id                      Int             @id @default(autoincrement()) @map("ID")
    subtable                String?         @map("Subtable") @db.Char(20)
    devId                   Int?            @map("DevID")
    deviceIndexDataTypeId   Int?            @map("DataTypeID")
    bitLength               Int?            @map("BitLength")
    bitOffset               Int?            @default(0) @map("BitOffset")
    index                   Int?            @map("Index")
    subindex                Int?            @map("Subindex")
    dynamic                 Boolean?        @map("Dynamic")
    modifiesOtherVariables  Boolean?        @map("ModifiesOtherVariables")
    subtopicId              Int?            @map("SubtopicID")
    active                  Boolean?        @map("Active")
    parameterId             String?         @map("ParameterID") @db.Char(64)
    mqttName                String?         @map("MQTTName") @db.Char(64)
    mqttLabel               String?         @map("MQTTLabel") @db.Text
    label                   String?         @map("Label") @db.Text
    range                   String?         @map("Range") @db.Text
    access                  String?         @map("Access") @db.Char(32)
    remark                  String?         @map("Remark") @db.Text
    value                   String?         @map("Value") @db.Text
    defaultValue            String?         @map("DefaultValue") @db.Text
    resolution              String?         @map("Resolution") @db.Char(255)
    gradient                String?         @map("Gradient") @db.Char(255)
    unit                    String?         @map("Unit") @db.Char(255)
    representationId        Int?            @map("RepresentationID")
    parameterGroup0         String?         @map("ParameterGroup0") @db.Char(255)
    parameterGroup1         String?         @map("ParameterGroup1") @db.Char(255)
    parameterGroup2         String?         @map("ParameterGroup2") @db.Char(255)
    parameterGroup3         String?         @map("ParameterGroup3") @db.Char(255)
    offset                  String?         @map("Offset") @db.Char(32)
    parameterDescriptor     String?         @map("ParameterDescriptor") @db.Text
    subParameterDescriptor  String?         @map("SubParameterDescriptor") @db.Text
    subDataTypeId           Int?            @map("SubDataTypeID")
    subBitLength            Int?            @map("SubBitLength")
    subRange                String?         @map("SubRange") @db.Char(32)
    subindexAccessSupported Boolean?        @default(true) @map("SubindexAccessSupported")
    requestObject           String?         @map("RequestObject") @db.Text
    deviceInstance          DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@unique([devId, index, subindex], map: "DevID")
    @@map("ISDU")
}

model MainDeviceClass {
    id                        Int                  @id @default(autoincrement()) @map("ID")
    deviceClassId             Int?                 @map("DeviceClassID")
    catalogName               String?              @map("CatalogName") @db.Char(255)
    subinterfaces             String?              @map("Subinterfaces") @db.Char(200)
    standardPort              Int?
    softwareAdapterId         Int?                 @default(0) @map("SoftwareAdapterID")
    defaultExtraInfos         String?              @db.Text
    configurationFileRequired Boolean              @default(false) @map("ConfigurationFileRequired")
    unlocked                  Boolean              @default(false) @map("Unlocked")
    ipRequired                Boolean              @default(true) @map("IPRequired")
    productCategory           String               @default("IOLinkMaster") @map("ProductCategory") @db.Char(64)
    configurationOptions      Json?
    deviceClasses             DeviceClass?         @relation(fields: [deviceClassId], references: [id], onDelete: Cascade)
    softwareAdapters          SoftwareAdapter?     @relation(fields: [softwareAdapterId], references: [id], onDelete: NoAction)
    mainDeviceInstances       MainDeviceInstance[]

    @@index([deviceClassId], map: "DeviceClassID")
    @@index([softwareAdapterId], map: "SoftwareAdapterID")
    @@map("MainDeviceClasses")
}

model MainDeviceInstance {
    id                Int              @id @default(autoincrement()) @map("ID")
    devId             Int?             @unique(map: "DevID") @map("DevID")
    mainDeviceClassId Int?             @map("MainDeviceClassID")
    mac               String?          @map("MAC") @db.Char(17)
    ipAddress         String?          @map("IPAddress") @db.Char(128)
    port              Int?             @map("Port")
    isSelfRegistering Boolean          @default(false)
    stopOnProblems    Boolean          @default(false) @map("StopOnProblems")
    extraInfos        String?          @default("") @db.Text
    startDevices      Boolean          @default(false)
    floorPlanId       Int?             @map("FloorPlanID")
    configuration     Json?
    allowPDOutWrite   Boolean          @default(false)
    statePDOutWrite   Boolean          @default(false)
    deviceInstance    DeviceInstance?  @relation(fields: [devId], references: [id], onDelete: Cascade)
    floorPlans        FloorPlan?       @relation(fields: [floorPlanId], references: [id], onDelete: NoAction)
    mainDeviceClass   MainDeviceClass? @relation(fields: [mainDeviceClassId], references: [id], onDelete: Cascade)

    @@index([floorPlanId], map: "FloorPlanID")
    @@index([mainDeviceClassId], map: "MainDeviceClassID")
    @@map("MainDeviceInstances")
}

model PerformanceIndicatorConfig {
    id             Int             @id @default(autoincrement()) @map("ID")
    index          String?         @map("Index") @db.Text
    maxValue       Decimal?        @map("MaxValue") @db.Decimal(65, 5)
    devId          Int?            @unique(map: "DevID") @map("DevID")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
}

model Privilege {
    id             Int             @id @default(autoincrement()) @map("ID")
    privilege      String?         @unique(map: "Privilege") @map("Privilege") @db.Char(255)
    description    String?         @map("Description") @db.Text
    rolePrivileges RolePrivilege[]

    @@map("Privileges")
}

model ProcessData {
    id                      Int                   @id @default(autoincrement()) @map("ID")
    devId                   Int                   @map("DevID")
    deviceIndexDataTypeId   Int?                  @map("DataTypeID")
    bitLength               Int?                  @map("BitLength")
    bitOffset               Int?                  @default(0) @map("BitOffset")
    index                   Int?                  @map("Index")
    subindex                Int?                  @map("Subindex")
    dynamic                 Boolean?              @map("Dynamic")
    modifiesOtherVariables  Boolean?              @map("ModifiesOtherVariables")
    subtopicId              Int?                  @map("SubtopicID")
    active                  Boolean?              @map("Active")
    parameterId             String?               @map("ParameterID") @db.Char(64)
    mqttName                String?               @map("MQTTName") @db.Char(64)
    mqttLabel               String?               @map("MQTTLabel") @db.Text
    label                   String?               @map("Label") @db.Text
    range                   String?               @map("Range") @db.Text
    access                  String?               @map("Access") @db.Char(32)
    remark                  String?               @map("Remark") @db.Text
    value                   String?               @map("Value") @db.Text
    defaultValue            String?               @map("DefaultValue") @db.Text
    resolution              String?               @map("Resolution") @db.Char(255)
    gradient                String?               @map("Gradient") @db.Char(255)
    unit                    String?               @map("Unit") @db.Char(255)
    representationId        Int?                  @map("RepresentationID")
    parameterGroup0         String?               @map("ParameterGroup0") @db.Char(255)
    parameterGroup1         String?               @map("ParameterGroup1") @db.Char(255)
    parameterGroup2         String?               @map("ParameterGroup2") @db.Char(255)
    parameterGroup3         String?               @map("ParameterGroup3") @db.Char(255)
    offset                  String?               @map("Offset") @db.Char(32)
    parameterDescriptor     String?               @map("ParameterDescriptor") @db.Text
    subParameterDescriptor  String?               @map("SubParameterDescriptor") @db.Text
    subDataTypeId           Int?                  @map("SubDataTypeID")
    subBitLength            Int?                  @map("SubBitLength")
    subRange                String?               @map("SubRange") @db.Char(32)
    subindexAccessSupported Boolean?              @default(true) @map("SubindexAccessSupported")
    requestObject           String?               @map("RequestObject") @db.Text
    byteOrder               String?               @map("ByteOrder") @db.Char(1)
    samplingRate            Int?                  @map("SamplingRate")
    conditionId             Int?                  @default(0) @map("ConditionID")
    processDataCondition    ProcessDataCondition? @relation(fields: [conditionId], references: [id], onDelete: Cascade)
    deviceInstance          DeviceInstance?       @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@unique([devId, index, subindex, conditionId], map: "DevID")
}

model ProcessDataCondition {
    id          Int           @id @default(autoincrement()) @map("ID")
    index       Int?          @map("Index")
    subindex    Int?          @map("Subindex")
    value       String?       @map("Value") @db.Char(64)
    processData ProcessData[]

    @@map("ProcessData_Conditions")
}

model ProcessDataMode {
    id                  Int             @id @default(autoincrement()) @map("ID")
    name                String?         @map("Name") @db.Char(32)
    messageSize         Int?            @map("MessageSize")
    minimalSamplingTime Int?            @map("MinimalSamplingTime")
    samplingTimeUnit    String?         @map("SamplingTimeUnit") @db.Char(255)
    devId               Int?            @map("DevID")
    deviceInstance      DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@unique([devId, name], map: "DevID")
    @@map("ProcessData_Modes")
}

model RegistrationStatus {
    id              Int              @id @default(autoincrement()) @map("ID")
    status          String?          @map("Status") @db.Char(32)
    deviceInstances DeviceInstance[]
}

model ReplayConfig {
    id             Int             @id @default(autoincrement()) @map("ID")
    triggers       Json?           @map("Triggers")
    valueMap       Json?           @map("ValueMap")
    devId          Int?            @unique(map: "DevID") @map("DevID")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
}

model ReplayData {
    id          Int        @id @default(autoincrement()) @map("ID")
    replaySetId Int?       @map("ReplaySetID")
    timestamp   DateTime   @default(now()) @map("Timestamp") @db.Timestamp(3)
    y1          Decimal?   @map("Y_1") @db.Decimal(65, 5)
    y2          Decimal?   @map("Y_2") @db.Decimal(65, 5)
    y3          Decimal?   @map("Y_3") @db.Decimal(65, 5)
    y4          Decimal?   @map("Y_4") @db.Decimal(65, 5)
    y5          Decimal?   @map("Y_5") @db.Decimal(65, 5)
    y6          Decimal?   @map("Y_6") @db.Decimal(65, 5)
    y7          Decimal?   @map("Y_7") @db.Decimal(65, 5)
    y8          Decimal?   @map("Y_8") @db.Decimal(65, 5)
    y9          Decimal?   @map("Y_9") @db.Decimal(65, 5)
    y10         Decimal?   @map("Y_10") @db.Decimal(65, 5)
    y11         Decimal?   @map("Y_11") @db.Decimal(65, 5)
    y12         Decimal?   @map("Y_12") @db.Decimal(65, 5)
    y13         Decimal?   @map("Y_13") @db.Decimal(65, 5)
    y14         Decimal?   @map("Y_14") @db.Decimal(65, 5)
    y15         Decimal?   @map("Y_15") @db.Decimal(65, 5)
    y16         Decimal?   @map("Y_16") @db.Decimal(65, 5)
    y17         Decimal?   @map("Y_17") @db.Decimal(65, 5)
    y18         Decimal?   @map("Y_18") @db.Decimal(65, 5)
    y19         Decimal?   @map("Y_19") @db.Decimal(65, 5)
    y20         Decimal?   @map("Y_20") @db.Decimal(65, 5)
    y21         Decimal?   @map("Y_21") @db.Decimal(65, 5)
    y22         Decimal?   @map("Y_22") @db.Decimal(65, 5)
    y23         Decimal?   @map("Y_23") @db.Decimal(65, 5)
    y24         Decimal?   @map("Y_24") @db.Decimal(65, 5)
    y25         Decimal?   @map("Y_25") @db.Decimal(65, 5)
    y26         Decimal?   @map("Y_26") @db.Decimal(65, 5)
    y27         Decimal?   @map("Y_27") @db.Decimal(65, 5)
    y28         Decimal?   @map("Y_28") @db.Decimal(65, 5)
    y29         Decimal?   @map("Y_29") @db.Decimal(65, 5)
    y30         Decimal?   @map("Y_30") @db.Decimal(65, 5)
    replaySet   ReplaySet? @relation(fields: [replaySetId], references: [id], onDelete: Cascade)

    @@index([replaySetId], map: "ReplaySetID")
}

model ReplaySet {
    id             Int             @id @default(autoincrement()) @map("ID")
    timestamp      DateTime        @default(now()) @map("Timestamp") @db.Timestamp(3)
    eventClassId   Int?            @map("EventClassID")
    label          String?         @map("Label") @db.Text
    devId          Int?            @map("DevID")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
    eventClass     EventClass?     @relation(fields: [eventClassId], references: [id], onDelete: Cascade)
    replayData     ReplayData[]

    @@index([devId], map: "DevID")
    @@index([eventClassId], map: "EventClassID")
    @@map("ReplaySets")
}

model Reporting {
    id             Int             @id @default(autoincrement()) @map("ID")
    devId          Int?            @map("DevID")
    timestamp      DateTime        @default(now()) @map("Timestamp") @db.Timestamp(3)
    source         String?         @default("") @map("Source") @db.Char(32)
    x1             Decimal?        @map("X_1") @db.Decimal(65, 5)
    x2             Decimal?        @map("X_2") @db.Decimal(65, 5)
    x3             Decimal?        @map("X_3") @db.Decimal(65, 5)
    x4             Decimal?        @map("X_4") @db.Decimal(65, 5)
    y1             Decimal?        @map("Y_1") @db.Decimal(65, 5)
    y2             Decimal?        @map("Y_2") @db.Decimal(65, 5)
    y3             Decimal?        @map("Y_3") @db.Decimal(65, 5)
    y4             Decimal?        @map("Y_4") @db.Decimal(65, 5)
    y5             Decimal?        @map("Y_5") @db.Decimal(65, 5)
    y6             Decimal?        @map("Y_6") @db.Decimal(65, 5)
    y7             Decimal?        @map("Y_7") @db.Decimal(65, 5)
    y8             Decimal?        @map("Y_8") @db.Decimal(65, 5)
    y9             Decimal?        @map("Y_9") @db.Decimal(65, 5)
    y10            Decimal?        @map("Y_10") @db.Decimal(65, 5)
    y11            Decimal?        @map("Y_11") @db.Decimal(65, 5)
    y12            Decimal?        @map("Y_12") @db.Decimal(65, 5)
    y13            Decimal?        @map("Y_13") @db.Decimal(65, 5)
    y14            Decimal?        @map("Y_14") @db.Decimal(65, 5)
    y15            Decimal?        @map("Y_15") @db.Decimal(65, 5)
    y16            Decimal?        @map("Y_16") @db.Decimal(65, 5)
    y17            Decimal?        @map("Y_17") @db.Decimal(65, 5)
    y18            Decimal?        @map("Y_18") @db.Decimal(65, 5)
    y19            Decimal?        @map("Y_19") @db.Decimal(65, 5)
    y20            Decimal?        @map("Y_20") @db.Decimal(65, 5)
    y21            Decimal?        @map("Y_21") @db.Decimal(65, 5)
    y22            Decimal?        @map("Y_22") @db.Decimal(65, 5)
    y23            Decimal?        @map("Y_23") @db.Decimal(65, 5)
    y24            Decimal?        @map("Y_24") @db.Decimal(65, 5)
    y25            Decimal?        @map("Y_25") @db.Decimal(65, 5)
    y26            Decimal?        @map("Y_26") @db.Decimal(65, 5)
    y27            Decimal?        @map("Y_27") @db.Decimal(65, 5)
    y28            Decimal?        @map("Y_28") @db.Decimal(65, 5)
    y29            Decimal?        @map("Y_29") @db.Decimal(65, 5)
    y30            Decimal?        @map("Y_30") @db.Decimal(65, 5)
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@unique([devId, timestamp], map: "Timestamp")
    @@index([devId], map: "DevID")
}

model ReportingConfig {
    id             Int             @id @default(autoincrement()) @map("ID")
    trigger        Json?           @map("Trigger")
    valueMap       Json?           @map("ValueMap")
    summaryAccess  Json?           @map("SummaryAccess")
    devId          Int?            @unique(map: "DevID") @map("DevID")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
}

model Representation {
    id          Int     @id @map("ID")
    name        String? @map("Name") @db.Char(64)
    description String? @map("Description") @db.Text
}

model RolePrivilege {
    id          Int        @id @default(autoincrement()) @map("ID")
    roleId      Int?       @map("RoleID")
    privilegeId Int?       @map("PrivilegeID")
    privilege   Privilege? @relation(fields: [privilegeId], references: [id], onDelete: Cascade)
    role        Role?      @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([roleId, privilegeId], map: "UniqueRPEntries")
    @@index([privilegeId], map: "PrivilegeID")
    @@map("RolePrivileges")
}

model Role {
    id             Int             @id @default(autoincrement()) @map("ID")
    name           String?         @unique(map: "Name") @map("Name") @db.Char(255)
    system         Boolean?        @map("System")
    description    String?         @map("Description") @db.Char(255)
    rolePrivileges RolePrivilege[]
    userRoles      UserRole[]
    tasks          Task[]

    @@map("Roles")
}

model SoftwareAdapter {
    id                Int               @id @default(autoincrement()) @map("ID")
    name              String            @unique(map: "Name") @map("Name") @db.Char(32)
    imageFile         String            @default("no_image.png") @map("ImageFile") @db.Char(128)
    vendorId          BigInt            @default(0) @map("VendorID") @db.UnsignedBigInt
    productName       String            @default("empty") @map("ProductName") @db.Char(64)
    orderCode         String            @default("empty") @map("OrderCode") @db.Char(32)
    description       String            @default("empty") @map("Description") @db.Char(255)
    revision          String?           @map("Revision") @db.Char(32)
    isIntern          Boolean           @default(false)
    dockerImage       String?           @map("DockerImage") @db.Char(255)
    vendors           Vendor            @relation(fields: [vendorId], references: [id], onDelete: NoAction)
    mainDeviceClasses MainDeviceClass[]

    @@index([vendorId], map: "VendorID")
    @@map("SoftwareAdapters")
}

model Timeseries {
    id             Int              @id @default(autoincrement()) @map("ID")
    devId          Int?             @map("DevID")
    name           String?          @map("Name") @db.Char(128)
    deviceInstance DeviceInstance?  @relation(fields: [devId], references: [id], onDelete: Cascade)
    timeseriesData TimeseriesData[]

    @@index([devId], map: "DevID")
}

model TimeseriesData {
    id             Int             @id @default(autoincrement()) @map("ID")
    timeseriesId   Int?            @map("TimeseriesID")
    devId          Int?            @map("DevID")
    timestampStart DateTime        @default(now()) @map("TimestampStart") @db.Timestamp(3)
    value          Decimal?        @map("Value") @db.Decimal(65, 5)
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
    timeseries     Timeseries?     @relation(fields: [timeseriesId], references: [id], onDelete: Cascade)

    @@index([devId], map: "DevID")
    @@index([timeseriesId], map: "TimeseriesID")
}

model TimeseriesDataHourAggregate {
    id             Int             @id @default(autoincrement()) @map("ID")
    timestamp      DateTime        @default(now()) @map("Timestamp") @db.Timestamp(0)
    devId          Int?            @map("DevID")
    timeseriesId   Int?            @map("TimeseriesID")
    value          Int?            @map("Value")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)

    @@index([devId], map: "DevID")
    @@map("TimeseriesDataHourAggregates")
}

model UpdaterConfig {
    id             Int             @id @default(autoincrement()) @map("ID")
    interval       Int?            @map("Interval")
    indices        String?         @map("Indices") @db.Text
    devId          Int?            @unique(map: "DevID") @map("DevID")
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
}

model UserRole {
    id     Int   @id @default(autoincrement()) @map("ID")
    userId Int?  @map("UserID")
    roleId Int?  @map("RoleID")
    roles  Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId], map: "UniqueUREntries")
    @@index([roleId], map: "RoleID")
    @@map("UserRoles")
}

model User {
    id                   Int                   @id @default(autoincrement()) @map("ID")
    user                 String?               @unique(map: "User") @map("User") @db.Char(255)
    password             String?               @map("Password") @db.Char(64)
    firstname            String?               @map("Firstname") @db.Char(255)
    lastname             String?               @map("Lastname") @db.Char(255)
    email                String?               @map("Email") @db.Char(255)
    system               Boolean?              @default(false) @map("System")
    activeEventInstances ActiveEventInstance[]
    deviceInstances      DeviceInstance[]
    eventInstances       EventInstance[]
    assignedMaintenances Maintenance[]         @relation("Maintenances_AssigneeIDToUsers")
    fixedMaintenances    Maintenance[]         @relation("Maintenances_FixedByUserIDToUsers")
    userRoles            UserRole[]

    @@map("Users")
}

model Vendor {
    id               BigInt            @id @default(autoincrement()) @map("ID") @db.UnsignedBigInt
    name             String?           @map("Name") @db.Char(128)
    text             String?           @map("Text") @db.Char(128)
    url              String?           @map("URL") @db.Char(255)
    logo             String?           @map("Logo") @db.Char(128)
    deviceClasses    DeviceClass[]
    softwareAdapters SoftwareAdapter[]

    @@map("Vendors")
}

model XConfig {
    id                        Int             @id @default(autoincrement()) @map("ID")
    valueMap                  Json?           @map("ValueMap")
    automaticReadForEvents    Boolean?        @map("AutomaticReadForEvents")
    automaticReadForReporting Boolean?        @map("AutomaticReadForReporting")
    devId                     Int?            @unique(map: "DevID") @map("DevID")
    deviceInstances           DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
}

model ExtrapolationFunction {
    id                Int                @id @default(autoincrement()) @map("ID")
    name              String?            @map("Name") @db.Char(64)
    predictionConfigs PredictionConfig[]

    @@map("ExtrapolationFunctions")
}

model PredictionConfig {
    /// @zod.nullable()
    id                              Int                   @id @default(autoincrement())
    identifier                      Int
    rangeAttribute                  String?
    rangeStart                      DateTime?
    rangeEnd                        DateTime?
    indexPreviousMaintenanceDate    Json
    indexMaxTimeBetweenMaintenances Json?
    indexPerformMaintenance         Json
    /// @zod.custom(z.object({}).nullish())
    maxValue                        Json?
    /// @zod.custom(z.object({}).nullish())
    currentValue                    Json?
    type                            String?               @db.Char(16)
    deviceClassId                   Int
    extrapolationFunctionId         Int                   @default(1)
    maintenanceTypeId               Int                   @unique
    deviceClass                     DeviceClass           @relation(fields: [deviceClassId], references: [id], onDelete: Cascade)
    extrapolationFunction           ExtrapolationFunction @relation(fields: [extrapolationFunctionId], references: [id], onDelete: Cascade)
    maintenanceType                 MaintenanceType       @relation(fields: [maintenanceTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    maintenances                    Maintenance[]

    @@unique([deviceClassId, identifier])
    @@index([extrapolationFunctionId])
}

model Maintenance {
    id                   Int               @id @default(autoincrement())
    /// the action the user has taken to fix the problem
    action               String?
    dueDate              DateTime          @default(now()) @db.Timestamp(0)
    maintenanceStartDate DateTime?         @db.Timestamp(0)
    maintenanceEndDate   DateTime?         @db.Timestamp(0)
    createdAt            DateTime          @default(now()) @db.Timestamp(0)
    updatedAt            DateTime?         @default(now()) @db.DateTime(0)
    assigneeId           Int?
    assignee             User?             @relation("Maintenances_AssigneeIDToUsers", fields: [assigneeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    deviceInstanceId     Int?
    deviceInstance       DeviceInstance?   @relation(fields: [deviceInstanceId], references: [id], onDelete: Cascade)
    fixedByUserId        Int?
    fixedByUser          User?             @relation("Maintenances_FixedByUserIDToUsers", fields: [fixedByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    predictionConfigId   Int?
    predictionConfig     PredictionConfig? @relation(fields: [predictionConfigId], references: [id])
    maintenanceTypeId    Int?
    maintenanceType      MaintenanceType?  @relation(fields: [maintenanceTypeId], references: [id])

    @@index([assigneeId])
    @@index([deviceInstanceId])
    @@index([fixedByUserId])
    @@index([maintenanceTypeId])
}

model MaintenanceType {
    id                      Int                      @id @default(autoincrement())
    name                    String
    type                    String?
    description             String?
    part                    String?
    cause                   String?
    impact                  String?
    solution                String?
    createdAt               DateTime                 @default(now()) @db.Timestamp(0)
    updatedAt               DateTime?                @default(now()) @db.DateTime(0)
    deviceClassId           Int?
    deviceClass             DeviceClass?             @relation(fields: [deviceClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    maintenanceConfig       MaintenanceConfig?
    predictionConfig        PredictionConfig?
    maintenanceAlarmConfigs MaintenanceAlarmConfig[]
    maintenances            Maintenance[]

    @@unique([deviceClassId, name], name: "deviceClassAndName")
}

model MaintenanceAlarmConfig {
    id                Int             @id @default(autoincrement())
    /// timestamp in ms
    offset            BigInt
    maintenanceTypeId Int
    maintenanceType   MaintenanceType @relation(fields: [maintenanceTypeId], references: [id])
    deviceClassId     Int
    deviceClass       DeviceClass     @relation(fields: [deviceClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventClassId      Int
    eventClass        EventClass      @relation(fields: [eventClassId], references: [id], onDelete: Cascade)

    @@unique([eventClassId, maintenanceTypeId, deviceClassId, offset])
}

model MaintenanceConfig {
    id                              Int              @id @default(autoincrement())
    indexPreviousMaintenanceDate    Json
    indexMaxTimeBetweenMaintenances Json
    indexPerformMaintenance         Json
    format                          String?
    createdAt                       DateTime         @default(now()) @db.Timestamp(0)
    updatedAt                       DateTime?        @default(now()) @db.DateTime(0)
    deviceClassId                   Int?
    deviceClass                     DeviceClass?     @relation(fields: [deviceClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    maintenanceTypeId               Int              @unique
    maintenanceType                 MaintenanceType? @relation(fields: [maintenanceTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReportType {
    id             Int     @id @default(autoincrement())
    name           String? @db.Char(64)
    information    String? @db.Char(128)
    chapters       Json?
    mailBody       String? @db.Text
    contentType    String? @db.Char(128)
    fileNameSchema String? @default("<day>_<uid>_<reportingType>.<fileType>") @db.Text
    defaultOptions String? @db.LongText
    devices        Json?
    tasks          Task[]

    @@map("reportTypes")
}

model Task {
    id             Int             @id @default(autoincrement())
    devId          Int?
    reportTypeId   Int?
    roleId         Int?
    firstSendDate  DateTime        @default(now()) @db.Timestamp(3)
    frequency      String?         @db.Char(32)
    reportOptions  String?         @db.LongText
    deviceInstance DeviceInstance? @relation(fields: [devId], references: [id], onDelete: Cascade)
    reportType     ReportType?     @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
    role           Role?           @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@index([devId], map: "devId")
    @@index([reportTypeId], map: "reportTypeId")
    @@index([roleId], map: "roleId")
    @@map("tasks")
}

enum DatabaseStatusStatus {
    initializing
    operational
    inconsistent
    error
}
