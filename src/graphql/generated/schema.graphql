### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ActiveEventInstance {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventClass(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClass
  eventClassId: Int
  id: Int!
  timestampAppears: DateTime
  user(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): User
  userId: Int
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
}

"""Should be array with at least one of the values mentioned bellow."""
enum ActiveEventInstanceGroupByEnum {
  id
}

input ActiveEventInstanceInput {
  devId: Int
  eventClassId: Int
  id: Int
  timestampAppears: DateTime
  userId: Int
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
}

type ActiveEventInstanceModel {
  count: Int!
  data: [ActiveEventInstance!]!
}

input ActiveEventInstanceOrderBy {
  devId: EnumAscDesc
  eventClassId: EnumAscDesc
  id: EnumAscDesc
  timestampAppears: EnumAscDesc
  userId: EnumAscDesc
  x1: EnumAscDesc
  x2: EnumAscDesc
  x3: EnumAscDesc
  x4: EnumAscDesc
}

type ActiveEventInstancePayload {
  devId: Int
  eventClassId: Int
  id: Int!
  timestampAppears: DateTime
  userId: Int
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
}

input ActiveEventInstanceWhere {
  devId: WhereInt
  eventClassId: WhereInt
  id: WhereInt
  timestampAppears: WhereDateTime
  userId: WhereInt
  x1: WhereString
  x2: WhereString
  x3: WhereString
  x4: WhereString
}

type AuthPayload {
  accessToken: String!
  user: User!
}

"""The `BigInt` scalar type to represent large integer values"""
scalar BigIntString

type DatabaseStatus {
  id: Int!

  """
  Contains Enum Type, any of: "initializing" | "operational" | "inconsistent" | "error"
  """
  status: DatabaseStatusStatus
  timestamp: DateTime!
}

"""Should be array with at least one of the values mentioned bellow."""
enum DatabaseStatusGroupByEnum {
  id
  timestamp
}

input DatabaseStatusInput {
  id: Int
  status: DatabaseStatusStatus
  timestamp: DateTime
}

type DatabaseStatusModel {
  count: Int!
  data: [DatabaseStatus!]!
}

input DatabaseStatusOrderBy {
  id: EnumAscDesc
  timestamp: EnumAscDesc
}

type DatabaseStatusPayload {
  id: Int!
  status: DatabaseStatusStatus
  timestamp: DateTime!
}

"""
Contains Enum Type, any of: "initializing" | "operational" | "inconsistent" | "error"
"""
enum DatabaseStatusStatus {
  error
  inconsistent
  initializing
  operational
}

input DatabaseStatusWhere {
  id: WhereInt
  status: DatabaseStatusStatus
  timestamp: WhereDateTime
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The `Decimal` scalar type to represent currency values"""
scalar Decimal

type DeletePayload {
  count: User!
}

type DeviceClass {
  allowFirmwareUpload: Boolean!
  catalog: Boolean!
  description: String
  deviceFiles(deviceFileOrderBy: DeviceFileOrderBy, deviceFileSkip: Int, deviceFileTake: Int, deviceFileWhere: DeviceFileWhere): DeviceFileModel!
  deviceId: Int
  deviceInstances(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstanceModel!
  deviceSubType: String
  deviceType: String
  eventClasses(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClassModel!
  firmwareVersion: String
  iconFileName: String
  id: Int!
  mainDeviceClasses(mainDeviceClassOrderBy: MainDeviceClassOrderBy, mainDeviceClassSkip: Int, mainDeviceClassTake: Int, mainDeviceClassWhere: MainDeviceClassWhere): MainDeviceClassModel!
  maintenanceAlarmConfigs(maintenanceAlarmConfigOrderBy: MaintenanceAlarmConfigOrderBy, maintenanceAlarmConfigSkip: Int, maintenanceAlarmConfigTake: Int, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere): MaintenanceAlarmConfigModel!
  maintenanceConfigs(maintenanceConfigOrderBy: MaintenanceConfigOrderBy, maintenanceConfigSkip: Int, maintenanceConfigTake: Int, maintenanceConfigWhere: MaintenanceConfigWhere): MaintenanceConfigModel!
  maintenanceTypes(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceTypeModel!
  mappedIndices: JSON
  pDbitLengthIn: Int
  pDbitLengthOut: Int
  pictureFileName: String
  predictionConfigs(predictionConfigOrderBy: PredictionConfigOrderBy, predictionConfigSkip: Int, predictionConfigTake: Int, predictionConfigWhere: PredictionConfigWhere): PredictionConfigModel!
  productId: String
  productName: String
  vendor(vendorOrderBy: VendorOrderBy, vendorSkip: Int, vendorTake: Int, vendorWhere: VendorWhere): Vendor
  vendorId: BigIntString
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceClassGroupByEnum {
  allowFirmwareUpload
  catalog
  id
}

input DeviceClassInput {
  allowFirmwareUpload: Boolean
  catalog: Boolean
  description: String
  deviceId: Int
  deviceSubType: String
  deviceType: String
  firmwareVersion: String
  iconFileName: String
  id: Int
  mappedIndices: JSON
  pDbitLengthIn: Int
  pDbitLengthOut: Int
  pictureFileName: String
  productId: String
  productName: String
  vendorId: BigIntString
}

type DeviceClassModel {
  count: Int!
  data: [DeviceClass!]!
}

input DeviceClassOrderBy {
  description: EnumAscDesc
  deviceId: EnumAscDesc
  deviceSubType: EnumAscDesc
  deviceType: EnumAscDesc
  firmwareVersion: EnumAscDesc
  iconFileName: EnumAscDesc
  id: EnumAscDesc
  pDbitLengthIn: EnumAscDesc
  pDbitLengthOut: EnumAscDesc
  pictureFileName: EnumAscDesc
  productId: EnumAscDesc
  productName: EnumAscDesc
}

type DeviceClassPayload {
  allowFirmwareUpload: Boolean!
  catalog: Boolean!
  description: String
  deviceId: Int
  deviceSubType: String
  deviceType: String
  firmwareVersion: String
  iconFileName: String
  id: Int!
  mappedIndices: JSON
  pDbitLengthIn: Int
  pDbitLengthOut: Int
  pictureFileName: String
  productId: String
  productName: String
  vendorId: BigIntString
}

input DeviceClassWhere {
  allowFirmwareUpload: Boolean
  catalog: Boolean
  description: WhereString
  deviceId: WhereInt
  deviceSubType: WhereString
  deviceType: WhereString
  firmwareVersion: WhereString
  iconFileName: WhereString
  id: WhereInt
  mappedIndices: JSON
  pDbitLengthIn: WhereInt
  pDbitLengthOut: WhereInt
  pictureFileName: WhereString
  productId: WhereString
  productName: WhereString
  vendorId: BigIntString
}

type DeviceControl {
  DeviceIndexDataTypeId: Int
  access: String
  bitLength: Int
  defaultValue: String
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  dynamic: Boolean
  id: Int!
  index: Int
  label: String
  lastSuccessDate: DateTime
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  parameterDescriptor: String
  parameterGroup: String
  parameterId: String
  range: String
  remark: String
  resolution: String
  subindex: Int
  subtopicId: Int
  successStatus: Boolean
  value: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceControlGroupByEnum {
  id
}

input DeviceControlInput {
  DeviceIndexDataTypeId: Int
  access: String
  bitLength: Int
  defaultValue: String
  devId: Int
  dynamic: Boolean
  id: Int
  index: Int
  label: String
  lastSuccessDate: DateTime
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  parameterDescriptor: String
  parameterGroup: String
  parameterId: String
  range: String
  remark: String
  resolution: String
  subindex: Int
  subtopicId: Int
  successStatus: Boolean
  value: String
}

type DeviceControlModel {
  count: Int!
  data: [DeviceControl!]!
}

input DeviceControlOrderBy {
  DeviceIndexDataTypeId: EnumAscDesc
  access: EnumAscDesc
  bitLength: EnumAscDesc
  defaultValue: EnumAscDesc
  devId: EnumAscDesc
  id: EnumAscDesc
  index: EnumAscDesc
  label: EnumAscDesc
  lastSuccessDate: EnumAscDesc
  mqttLabel: EnumAscDesc
  mqttName: EnumAscDesc
  parameterDescriptor: EnumAscDesc
  parameterGroup: EnumAscDesc
  parameterId: EnumAscDesc
  range: EnumAscDesc
  remark: EnumAscDesc
  resolution: EnumAscDesc
  subindex: EnumAscDesc
  subtopicId: EnumAscDesc
  value: EnumAscDesc
}

type DeviceControlPayload {
  DeviceIndexDataTypeId: Int
  access: String
  bitLength: Int
  defaultValue: String
  devId: Int
  dynamic: Boolean
  id: Int!
  index: Int
  label: String
  lastSuccessDate: DateTime
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  parameterDescriptor: String
  parameterGroup: String
  parameterId: String
  range: String
  remark: String
  resolution: String
  subindex: Int
  subtopicId: Int
  successStatus: Boolean
  value: String
}

input DeviceControlWhere {
  DeviceIndexDataTypeId: WhereInt
  access: WhereString
  bitLength: WhereInt
  defaultValue: WhereString
  devId: WhereInt
  dynamic: Boolean
  id: WhereInt
  index: WhereInt
  label: WhereString
  lastSuccessDate: WhereDateTime
  modifiesOtherVariables: Boolean
  mqttLabel: WhereString
  mqttName: WhereString
  parameterDescriptor: WhereString
  parameterGroup: WhereString
  parameterId: WhereString
  range: WhereString
  remark: WhereString
  resolution: WhereString
  subindex: WhereInt
  subtopicId: WhereInt
  successStatus: Boolean
  value: WhereString
}

type DeviceCycle {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  globalCyclesEnd: Int
  globalCyclesStart: Int
  id: Int!
  timestamp: DateTime!
  timestampEnd: DateTime
  timestampStart: DateTime
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceCycleGroupByEnum {
  id
  timestamp
}

input DeviceCycleInput {
  devId: Int
  globalCyclesEnd: Int
  globalCyclesStart: Int
  id: Int
  timestamp: DateTime
  timestampEnd: DateTime
  timestampStart: DateTime
}

type DeviceCycleModel {
  count: Int!
  data: [DeviceCycle!]!
}

input DeviceCycleOrderBy {
  devId: EnumAscDesc
  globalCyclesEnd: EnumAscDesc
  globalCyclesStart: EnumAscDesc
  id: EnumAscDesc
  timestamp: EnumAscDesc
  timestampEnd: EnumAscDesc
  timestampStart: EnumAscDesc
}

type DeviceCyclePayload {
  devId: Int
  globalCyclesEnd: Int
  globalCyclesStart: Int
  id: Int!
  timestamp: DateTime!
  timestampEnd: DateTime
  timestampStart: DateTime
}

input DeviceCycleWhere {
  devId: WhereInt
  globalCyclesEnd: WhereInt
  globalCyclesStart: WhereInt
  id: WhereInt
  timestamp: WhereDateTime
  timestampEnd: WhereDateTime
  timestampStart: WhereDateTime
}

type DeviceData {
  access: String
  active: Boolean
  bitLength: Int
  bitOffset: Int
  defaultValue: String
  devId: Int
  deviceIndexDataTypeId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  dynamic: Boolean
  gradient: String
  id: Int!
  index: Int
  label: String
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  offset: String
  parameterDescriptor: String
  parameterGroup0: String
  parameterGroup1: String
  parameterGroup2: String
  parameterGroup3: String
  parameterId: String
  range: String
  remark: String
  representationId: Int
  requestObject: String
  resolution: String
  subBitLength: Int
  subDataTypeId: Int
  subParameterDescriptor: String
  subRange: String
  subindex: Int
  subindexAccessSupported: Boolean
  subtable: String
  subtopicId: Int
  unit: String
  value: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceDataGroupByEnum {
  id
}

input DeviceDataInput {
  access: String
  active: Boolean
  bitLength: Int
  bitOffset: Int
  defaultValue: String
  devId: Int
  deviceIndexDataTypeId: Int
  dynamic: Boolean
  gradient: String
  id: Int
  index: Int
  label: String
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  offset: String
  parameterDescriptor: String
  parameterGroup0: String
  parameterGroup1: String
  parameterGroup2: String
  parameterGroup3: String
  parameterId: String
  range: String
  remark: String
  representationId: Int
  requestObject: String
  resolution: String
  subBitLength: Int
  subDataTypeId: Int
  subParameterDescriptor: String
  subRange: String
  subindex: Int
  subindexAccessSupported: Boolean
  subtable: String
  subtopicId: Int
  unit: String
  value: String
}

type DeviceDataModel {
  count: Int!
  data: [DeviceData!]!
}

input DeviceDataOrderBy {
  access: EnumAscDesc
  bitLength: EnumAscDesc
  bitOffset: EnumAscDesc
  defaultValue: EnumAscDesc
  devId: EnumAscDesc
  deviceIndexDataTypeId: EnumAscDesc
  gradient: EnumAscDesc
  id: EnumAscDesc
  index: EnumAscDesc
  label: EnumAscDesc
  mqttLabel: EnumAscDesc
  mqttName: EnumAscDesc
  offset: EnumAscDesc
  parameterDescriptor: EnumAscDesc
  parameterGroup0: EnumAscDesc
  parameterGroup1: EnumAscDesc
  parameterGroup2: EnumAscDesc
  parameterGroup3: EnumAscDesc
  parameterId: EnumAscDesc
  range: EnumAscDesc
  remark: EnumAscDesc
  representationId: EnumAscDesc
  requestObject: EnumAscDesc
  resolution: EnumAscDesc
  subBitLength: EnumAscDesc
  subDataTypeId: EnumAscDesc
  subParameterDescriptor: EnumAscDesc
  subRange: EnumAscDesc
  subindex: EnumAscDesc
  subtable: EnumAscDesc
  subtopicId: EnumAscDesc
  unit: EnumAscDesc
  value: EnumAscDesc
}

type DeviceDataPayload {
  access: String
  active: Boolean
  bitLength: Int
  bitOffset: Int
  defaultValue: String
  devId: Int
  deviceIndexDataTypeId: Int
  dynamic: Boolean
  gradient: String
  id: Int!
  index: Int
  label: String
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  offset: String
  parameterDescriptor: String
  parameterGroup0: String
  parameterGroup1: String
  parameterGroup2: String
  parameterGroup3: String
  parameterId: String
  range: String
  remark: String
  representationId: Int
  requestObject: String
  resolution: String
  subBitLength: Int
  subDataTypeId: Int
  subParameterDescriptor: String
  subRange: String
  subindex: Int
  subindexAccessSupported: Boolean
  subtable: String
  subtopicId: Int
  unit: String
  value: String
}

input DeviceDataWhere {
  access: WhereString
  active: Boolean
  bitLength: WhereInt
  bitOffset: WhereInt
  defaultValue: WhereString
  devId: WhereInt
  deviceIndexDataTypeId: WhereInt
  dynamic: Boolean
  gradient: WhereString
  id: WhereInt
  index: WhereInt
  label: WhereString
  modifiesOtherVariables: Boolean
  mqttLabel: WhereString
  mqttName: WhereString
  offset: WhereString
  parameterDescriptor: WhereString
  parameterGroup0: WhereString
  parameterGroup1: WhereString
  parameterGroup2: WhereString
  parameterGroup3: WhereString
  parameterId: WhereString
  range: WhereString
  remark: WhereString
  representationId: WhereInt
  requestObject: WhereString
  resolution: WhereString
  subBitLength: WhereInt
  subDataTypeId: WhereInt
  subParameterDescriptor: WhereString
  subRange: WhereString
  subindex: WhereInt
  subindexAccessSupported: Boolean
  subtable: WhereString
  subtopicId: WhereInt
  unit: WhereString
  value: WhereString
}

type DeviceFile {
  deviceClass(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass
  deviceClassId: Int
  deviceId: Int
  filename: String
  filetype: String
  id: Int!
  revision: Float
  updatedAt: DateTime!
  vendorId: BigIntString
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceFileGroupByEnum {
  id
  updatedAt
}

input DeviceFileInput {
  deviceClassId: Int
  deviceId: Int
  filename: String
  filetype: String
  id: Int
  revision: Float
  updatedAt: DateTime
  vendorId: BigIntString
}

type DeviceFileModel {
  count: Int!
  data: [DeviceFile!]!
}

input DeviceFileOrderBy {
  deviceClassId: EnumAscDesc
  deviceId: EnumAscDesc
  filename: EnumAscDesc
  filetype: EnumAscDesc
  id: EnumAscDesc
  updatedAt: EnumAscDesc
}

type DeviceFilePayload {
  deviceClassId: Int
  deviceId: Int
  filename: String
  filetype: String
  id: Int!
  revision: Float
  updatedAt: DateTime!
  vendorId: BigIntString
}

input DeviceFileWhere {
  deviceClassId: WhereInt
  deviceId: WhereInt
  filename: WhereString
  filetype: WhereString
  id: WhereInt
  revision: Float
  updatedAt: WhereDateTime
  vendorId: BigIntString
}

type DeviceIndexDataType {
  id: Int!
  name: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceIndexDataTypeGroupByEnum {
  id
}

input DeviceIndexDataTypeInput {
  id: Int
  name: String
}

type DeviceIndexDataTypeModel {
  count: Int!
  data: [DeviceIndexDataType!]!
}

input DeviceIndexDataTypeOrderBy {
  id: EnumAscDesc
  name: EnumAscDesc
}

type DeviceIndexDataTypePayload {
  id: Int!
  name: String
}

input DeviceIndexDataTypeWhere {
  id: WhereInt
  name: WhereString
}

type DeviceInstance {
  active: Boolean!
  activeEventInstances(activeEventInstanceOrderBy: ActiveEventInstanceOrderBy, activeEventInstanceSkip: Int, activeEventInstanceTake: Int, activeEventInstanceWhere: ActiveEventInstanceWhere): ActiveEventInstanceModel!
  allowDelete: Boolean!
  ancestorMainDevId: Int
  appLink: JSON
  articleNumber: String
  connectionState: Boolean

  """@zod.nullish()"""
  createdOn: DateTime!
  customPictureFileName: String
  deviceClassId: Int
  deviceClasses(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass
  deviceControl(deviceControlOrderBy: DeviceControlOrderBy, deviceControlSkip: Int, deviceControlTake: Int, deviceControlWhere: DeviceControlWhere): DeviceControl
  deviceCycle(deviceCycleOrderBy: DeviceCycleOrderBy, deviceCycleSkip: Int, deviceCycleTake: Int, deviceCycleWhere: DeviceCycleWhere): DeviceCycle
  deviceDescription: JSON
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  deviceStatus: JSON
  devicedata(deviceDataOrderBy: DeviceDataOrderBy, deviceDataSkip: Int, deviceDataTake: Int, deviceDataWhere: DeviceDataWhere): DeviceDataModel!
  eventEnd: DateTime
  eventGroupData(eventGroupDataOrderBy: EventGroupDataOrderBy, eventGroupDataSkip: Int, eventGroupDataTake: Int, eventGroupDataWhere: EventGroupDataWhere): EventGroupDataModel!
  eventGroupDataHourAggregates(eventGroupDataHourAggregateOrderBy: EventGroupDataHourAggregateOrderBy, eventGroupDataHourAggregateSkip: Int, eventGroupDataHourAggregateTake: Int, eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateWhere): EventGroupDataHourAggregateModel!
  eventGroupValues(eventGroupValueOrderBy: EventGroupValueOrderBy, eventGroupValueSkip: Int, eventGroupValueTake: Int, eventGroupValueWhere: EventGroupValueWhere): EventGroupValueModel!
  eventGroups(eventGroupOrderBy: EventGroupOrderBy, eventGroupSkip: Int, eventGroupTake: Int, eventGroupWhere: EventGroupWhere): EventGroupModel!
  eventInstances(eventInstanceOrderBy: EventInstanceOrderBy, eventInstanceSkip: Int, eventInstanceTake: Int, eventInstanceWhere: EventInstanceWhere): EventInstanceModel!
  eventMap: JSON
  eventStart: DateTime
  exportCloud: Boolean!
  geolocation: JSON
  hidden: Boolean!

  """@zod.nullish()"""
  id: Int!
  isRelayed: Boolean!
  kpi: JSON
  locationAssetId: String
  locationPos: String
  locationTag: String
  mainDeviceInstance(mainDeviceInstanceOrderBy: MainDeviceInstanceOrderBy, mainDeviceInstanceSkip: Int, mainDeviceInstanceTake: Int, mainDeviceInstanceWhere: MainDeviceInstanceWhere): MainDeviceInstance
  maintenances(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!
  manuallyDeactivated: Boolean!
  name: String
  oeeConfig: JSON
  otherDeviceInstances(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstanceModel!
  parentDevId: Int
  performanceIndicatorConfig(performanceIndicatorConfigOrderBy: PerformanceIndicatorConfigOrderBy, performanceIndicatorConfigSkip: Int, performanceIndicatorConfigTake: Int, performanceIndicatorConfigWhere: PerformanceIndicatorConfigWhere): PerformanceIndicatorConfig
  preservedChunks: String
  processData(processDataOrderBy: ProcessDataOrderBy, processDataSkip: Int, processDataTake: Int, processDataWhere: ProcessDataWhere): ProcessDataModel!
  processDataModes(processDataModeOrderBy: ProcessDataModeOrderBy, processDataModeSkip: Int, processDataModeTake: Int, processDataModeWhere: ProcessDataModeWhere): ProcessDataModeModel!
  regStatusId: Int
  registrationStatus(registrationStatusOrderBy: RegistrationStatusOrderBy, registrationStatusSkip: Int, registrationStatusTake: Int, registrationStatusWhere: RegistrationStatusWhere): RegistrationStatus
  replayConfig(replayConfigOrderBy: ReplayConfigOrderBy, replayConfigSkip: Int, replayConfigTake: Int, replayConfigWhere: ReplayConfigWhere): ReplayConfig
  replaySets(replaySetOrderBy: ReplaySetOrderBy, replaySetSkip: Int, replaySetTake: Int, replaySetWhere: ReplaySetWhere): ReplaySetModel!
  reporting(reportingOrderBy: ReportingOrderBy, reportingSkip: Int, reportingTake: Int, reportingWhere: ReportingWhere): ReportingModel!
  reportingConfig(reportingConfigOrderBy: ReportingConfigOrderBy, reportingConfigSkip: Int, reportingConfigTake: Int, reportingConfigWhere: ReportingConfigWhere): ReportingConfig
  serialNumber: String
  shortName: String
  subinterface: String
  tasks(taskOrderBy: TaskOrderBy, taskSkip: Int, taskTake: Int, taskWhere: TaskWhere): TaskModel!
  timeseries(timeseriesOrderBy: TimeseriesOrderBy, timeseriesSkip: Int, timeseriesTake: Int, timeseriesWhere: TimeseriesWhere): TimeseriesModel!
  timeseriesData(timeseriesDataOrderBy: TimeseriesDataOrderBy, timeseriesDataSkip: Int, timeseriesDataTake: Int, timeseriesDataWhere: TimeseriesDataWhere): TimeseriesDataModel!
  timeseriesDataHourAggregates(timeseriesDataHourAggregateOrderBy: TimeseriesDataHourAggregateOrderBy, timeseriesDataHourAggregateSkip: Int, timeseriesDataHourAggregateTake: Int, timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateWhere): TimeseriesDataHourAggregateModel!
  uniqueId: String
  updaterConfig(updaterConfigOrderBy: UpdaterConfigOrderBy, updaterConfigSkip: Int, updaterConfigTake: Int, updaterConfigWhere: UpdaterConfigWhere): UpdaterConfig
  user(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): User
  userId: Int
  xConfig(xConfigOrderBy: XConfigOrderBy, xConfigSkip: Int, xConfigTake: Int, xConfigWhere: XConfigWhere): XConfig
}

"""Should be array with at least one of the values mentioned bellow."""
enum DeviceInstanceGroupByEnum {
  active
  allowDelete
  createdOn
  exportCloud
  hidden
  id
  isRelayed
  manuallyDeactivated
}

input DeviceInstanceInput {
  active: Boolean
  allowDelete: Boolean
  ancestorMainDevId: Int
  appLink: JSON
  articleNumber: String
  connectionState: Boolean
  createdOn: DateTime
  customPictureFileName: String
  deviceClassId: Int
  deviceDescription: JSON
  eventEnd: DateTime
  eventMap: JSON
  eventStart: DateTime
  exportCloud: Boolean
  geolocation: JSON
  hidden: Boolean
  id: Int
  isRelayed: Boolean
  kpi: JSON
  locationAssetId: String
  locationPos: String
  locationTag: String
  manuallyDeactivated: Boolean
  name: String
  oeeConfig: JSON
  parentDevId: Int
  preservedChunks: String
  regStatusId: Int
  serialNumber: String
  shortName: String
  subinterface: String
  uniqueId: String
  userId: Int
}

type DeviceInstanceModel {
  count: Int!
  data: [DeviceInstance!]!
}

input DeviceInstanceOrderBy {
  ancestorMainDevId: EnumAscDesc
  articleNumber: EnumAscDesc
  createdOn: EnumAscDesc
  customPictureFileName: EnumAscDesc
  deviceClassId: EnumAscDesc
  eventEnd: EnumAscDesc
  eventStart: EnumAscDesc
  id: EnumAscDesc
  locationAssetId: EnumAscDesc
  locationPos: EnumAscDesc
  locationTag: EnumAscDesc
  name: EnumAscDesc
  parentDevId: EnumAscDesc
  preservedChunks: EnumAscDesc
  regStatusId: EnumAscDesc
  serialNumber: EnumAscDesc
  shortName: EnumAscDesc
  subinterface: EnumAscDesc
  uniqueId: EnumAscDesc
  userId: EnumAscDesc
}

type DeviceInstancePayload {
  active: Boolean!
  allowDelete: Boolean!
  ancestorMainDevId: Int
  appLink: JSON
  articleNumber: String
  connectionState: Boolean
  createdOn: DateTime!
  customPictureFileName: String
  deviceClassId: Int
  deviceDescription: JSON
  eventEnd: DateTime
  eventMap: JSON
  eventStart: DateTime
  exportCloud: Boolean!
  geolocation: JSON
  hidden: Boolean!
  id: Int!
  isRelayed: Boolean!
  kpi: JSON
  locationAssetId: String
  locationPos: String
  locationTag: String
  manuallyDeactivated: Boolean!
  name: String
  oeeConfig: JSON
  parentDevId: Int
  preservedChunks: String
  regStatusId: Int
  serialNumber: String
  shortName: String
  subinterface: String
  uniqueId: String
  userId: Int
}

input DeviceInstanceWhere {
  active: Boolean
  allowDelete: Boolean
  ancestorMainDevId: WhereInt
  appLink: JSON
  articleNumber: WhereString
  connectionState: Boolean
  createdOn: WhereDateTime
  customPictureFileName: WhereString
  deviceClassId: WhereInt
  deviceDescription: JSON
  eventEnd: WhereDateTime
  eventMap: JSON
  eventStart: WhereDateTime
  exportCloud: Boolean
  geolocation: JSON
  hidden: Boolean
  id: WhereInt
  isRelayed: Boolean
  kpi: JSON
  locationAssetId: WhereString
  locationPos: WhereString
  locationTag: WhereString
  manuallyDeactivated: Boolean
  name: WhereString
  oeeConfig: JSON
  parentDevId: WhereInt
  preservedChunks: WhereString
  regStatusId: WhereInt
  serialNumber: WhereString
  shortName: WhereString
  subinterface: WhereString
  uniqueId: WhereString
  userId: WhereInt
}

type DevicePayloadSub {
  deviceID: String!
  operatingTemperature: Float!
  preasureUnit: String
  temperatureUnit: String!
  vacuumPreasure: Float!
}

"""
orderBy can recieve only one string "asc" or "desc"
"""
enum EnumAscDesc {
  asc
  desc
}

type EtcHost {
  ipAddress: String!
  url: String!
}

"""Should be array with at least one of the values mentioned bellow."""
enum EtcHostGroupByEnum {
  ipAddress
  url
}

input EtcHostInput {
  ipAddress: String
  url: String
}

type EtcHostModel {
  count: Int!
  data: [EtcHost!]!
}

input EtcHostOrderBy {
  ipAddress: EnumAscDesc
  url: EnumAscDesc
}

type EtcHostPayload {
  ipAddress: String!
  url: String!
}

input EtcHostWhere {
  ipAddress: WhereString
  url: WhereString
}

type EventClass {
  activeEventInstances(activeEventInstanceOrderBy: ActiveEventInstanceOrderBy, activeEventInstanceSkip: Int, activeEventInstanceTake: Int, activeEventInstanceWhere: ActiveEventInstanceWhere): ActiveEventInstanceModel!
  cause: String
  code: BigIntString
  description: String
  deviceClass(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass
  deviceClassId: Int
  eventInstances(eventInstanceOrderBy: EventInstanceOrderBy, eventInstanceSkip: Int, eventInstanceTake: Int, eventInstanceWhere: EventInstanceWhere): EventInstanceModel!
  eventType(eventTypeOrderBy: EventTypeOrderBy, eventTypeSkip: Int, eventTypeTake: Int, eventTypeWhere: EventTypeWhere): EventType
  eventTypesId: Int
  id: Int!
  impact: String
  maintenanceAlarmConfigs(maintenanceAlarmConfigOrderBy: MaintenanceAlarmConfigOrderBy, maintenanceAlarmConfigSkip: Int, maintenanceAlarmConfigTake: Int, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere): MaintenanceAlarmConfigModel!
  name: String
  remark: String
  replaySets(replaySetOrderBy: ReplaySetOrderBy, replaySetSkip: Int, replaySetTake: Int, replaySetWhere: ReplaySetWhere): ReplaySetModel!
  solution: String
  source: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventClassGroupByEnum {
  id
}

input EventClassInput {
  cause: String
  code: BigIntString
  description: String
  deviceClassId: Int
  eventTypesId: Int
  id: Int
  impact: String
  name: String
  remark: String
  solution: String
  source: String
}

type EventClassModel {
  count: Int!
  data: [EventClass!]!
}

input EventClassOrderBy {
  cause: EnumAscDesc
  description: EnumAscDesc
  deviceClassId: EnumAscDesc
  eventTypesId: EnumAscDesc
  id: EnumAscDesc
  impact: EnumAscDesc
  name: EnumAscDesc
  remark: EnumAscDesc
  solution: EnumAscDesc
  source: EnumAscDesc
}

type EventClassPayload {
  cause: String
  code: BigIntString
  description: String
  deviceClassId: Int
  eventTypesId: Int
  id: Int!
  impact: String
  name: String
  remark: String
  solution: String
  source: String
}

input EventClassWhere {
  cause: WhereString
  code: BigIntString
  description: WhereString
  deviceClassId: WhereInt
  eventTypesId: WhereInt
  id: WhereInt
  impact: WhereString
  name: WhereString
  remark: WhereString
  solution: WhereString
  source: WhereString
}

type EventGroup {
  computed: JSON
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventGroupCodes(eventGroupCodeOrderBy: EventGroupCodeOrderBy, eventGroupCodeSkip: Int, eventGroupCodeTake: Int, eventGroupCodeWhere: EventGroupCodeWhere): EventGroupCodeModel!
  eventGroupData(eventGroupDataOrderBy: EventGroupDataOrderBy, eventGroupDataSkip: Int, eventGroupDataTake: Int, eventGroupDataWhere: EventGroupDataWhere): EventGroupDataModel!
  groupName: String
  id: Int!
}

type EventGroupCode {
  eventClassId: Int
  eventCode: Int
  eventGroup(eventGroupOrderBy: EventGroupOrderBy, eventGroupSkip: Int, eventGroupTake: Int, eventGroupWhere: EventGroupWhere): EventGroup
  eventGroupId: Int
  id: Int!
  label: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventGroupCodeGroupByEnum {
  id
}

input EventGroupCodeInput {
  eventClassId: Int
  eventCode: Int
  eventGroupId: Int
  id: Int
  label: String
}

type EventGroupCodeModel {
  count: Int!
  data: [EventGroupCode!]!
}

input EventGroupCodeOrderBy {
  eventClassId: EnumAscDesc
  eventCode: EnumAscDesc
  eventGroupId: EnumAscDesc
  id: EnumAscDesc
  label: EnumAscDesc
}

type EventGroupCodePayload {
  eventClassId: Int
  eventCode: Int
  eventGroupId: Int
  id: Int!
  label: String
}

input EventGroupCodeWhere {
  eventClassId: WhereInt
  eventCode: WhereInt
  eventGroupId: WhereInt
  id: WhereInt
  label: WhereString
}

type EventGroupData {
  code: Int
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventGroup(eventGroupOrderBy: EventGroupOrderBy, eventGroupSkip: Int, eventGroupTake: Int, eventGroupWhere: EventGroupWhere): EventGroup
  eventGroupId: Int
  id: Int!
  label: String
  timestampStart: DateTime!
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventGroupDataGroupByEnum {
  id
  timestampStart
}

type EventGroupDataHourAggregate {
  average: Decimal
  code: Int
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventGroupId: Int
  id: Int!
  label: String!
  max: Int
  min: Int
  sum: Int
  timestamp: DateTime!
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventGroupDataHourAggregateGroupByEnum {
  id
  label
  timestamp
}

input EventGroupDataHourAggregateInput {
  average: Decimal
  code: Int
  devId: Int
  eventGroupId: Int
  id: Int
  label: String
  max: Int
  min: Int
  sum: Int
  timestamp: DateTime
}

type EventGroupDataHourAggregateModel {
  count: Int!
  data: [EventGroupDataHourAggregate!]!
}

input EventGroupDataHourAggregateOrderBy {
  average: EnumAscDesc
  code: EnumAscDesc
  devId: EnumAscDesc
  eventGroupId: EnumAscDesc
  id: EnumAscDesc
  label: EnumAscDesc
  max: EnumAscDesc
  min: EnumAscDesc
  sum: EnumAscDesc
  timestamp: EnumAscDesc
}

type EventGroupDataHourAggregatePayload {
  average: Decimal
  code: Int
  devId: Int
  eventGroupId: Int
  id: Int!
  label: String!
  max: Int
  min: Int
  sum: Int
  timestamp: DateTime!
}

input EventGroupDataHourAggregateWhere {
  average: WhereString
  code: WhereInt
  devId: WhereInt
  eventGroupId: WhereInt
  id: WhereInt
  label: WhereString
  max: WhereInt
  min: WhereInt
  sum: WhereInt
  timestamp: WhereDateTime
}

input EventGroupDataInput {
  code: Int
  devId: Int
  eventGroupId: Int
  id: Int
  label: String
  timestampStart: DateTime
}

type EventGroupDataModel {
  count: Int!
  data: [EventGroupData!]!
}

input EventGroupDataOrderBy {
  code: EnumAscDesc
  devId: EnumAscDesc
  eventGroupId: EnumAscDesc
  id: EnumAscDesc
  label: EnumAscDesc
  timestampStart: EnumAscDesc
}

type EventGroupDataPayload {
  code: Int
  devId: Int
  eventGroupId: Int
  id: Int!
  label: String
  timestampStart: DateTime!
}

input EventGroupDataWhere {
  code: WhereInt
  devId: WhereInt
  eventGroupId: WhereInt
  id: WhereInt
  label: WhereString
  timestampStart: WhereDateTime
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventGroupGroupByEnum {
  id
}

input EventGroupInput {
  computed: JSON
  devId: Int
  groupName: String
  id: Int
}

type EventGroupModel {
  count: Int!
  data: [EventGroup!]!
}

input EventGroupOrderBy {
  devId: EnumAscDesc
  groupName: EnumAscDesc
  id: EnumAscDesc
}

type EventGroupPayload {
  computed: JSON
  devId: Int
  groupName: String
  id: Int!
}

type EventGroupValue {
  code: Int
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventGroupName: String!
  eventGroupValue: String!
  id: Int!
  label: String
  timestamp: DateTime!
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventGroupValueGroupByEnum {
  eventGroupName
  eventGroupValue
  id
  timestamp
}

input EventGroupValueInput {
  code: Int
  devId: Int
  eventGroupName: String
  eventGroupValue: String
  id: Int
  label: String
  timestamp: DateTime
}

type EventGroupValueModel {
  count: Int!
  data: [EventGroupValue!]!
}

input EventGroupValueOrderBy {
  code: EnumAscDesc
  devId: EnumAscDesc
  eventGroupName: EnumAscDesc
  eventGroupValue: EnumAscDesc
  id: EnumAscDesc
  label: EnumAscDesc
  timestamp: EnumAscDesc
}

type EventGroupValuePayload {
  code: Int
  devId: Int
  eventGroupName: String!
  eventGroupValue: String!
  id: Int!
  label: String
  timestamp: DateTime!
}

input EventGroupValueWhere {
  code: WhereInt
  devId: WhereInt
  eventGroupName: WhereString
  eventGroupValue: WhereString
  id: WhereInt
  label: WhereString
  timestamp: WhereDateTime
}

input EventGroupWhere {
  computed: JSON
  devId: WhereInt
  groupName: WhereString
  id: WhereInt
}

type EventInstance {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventClass(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClass
  eventClassId: Int
  id: Int!
  timestampAppears: DateTime
  timestampDisappears: DateTime
  user(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): User
  userId: Int
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventInstanceGroupByEnum {
  id
}

input EventInstanceInput {
  devId: Int
  eventClassId: Int
  id: Int
  timestampAppears: DateTime
  timestampDisappears: DateTime
  userId: Int
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
}

type EventInstanceModel {
  count: Int!
  data: [EventInstance!]!
}

input EventInstanceOrderBy {
  devId: EnumAscDesc
  eventClassId: EnumAscDesc
  id: EnumAscDesc
  timestampAppears: EnumAscDesc
  timestampDisappears: EnumAscDesc
  userId: EnumAscDesc
  x1: EnumAscDesc
  x2: EnumAscDesc
  x3: EnumAscDesc
  x4: EnumAscDesc
}

type EventInstancePayload {
  devId: Int
  eventClassId: Int
  id: Int!
  timestampAppears: DateTime
  timestampDisappears: DateTime
  userId: Int
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
}

input EventInstanceWhere {
  devId: WhereInt
  eventClassId: WhereInt
  id: WhereInt
  timestampAppears: WhereDateTime
  timestampDisappears: WhereDateTime
  userId: WhereInt
  x1: WhereString
  x2: WhereString
  x3: WhereString
  x4: WhereString
}

type EventType {
  deviceCondition: Int
  eventClasses(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClassModel!
  id: Int!
  type: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum EventTypeGroupByEnum {
  id
}

input EventTypeInput {
  deviceCondition: Int
  id: Int
  type: String
}

type EventTypeModel {
  count: Int!
  data: [EventType!]!
}

input EventTypeOrderBy {
  deviceCondition: EnumAscDesc
  id: EnumAscDesc
  type: EnumAscDesc
}

type EventTypePayload {
  deviceCondition: Int
  id: Int!
  type: String
}

input EventTypeWhere {
  deviceCondition: WhereInt
  id: WhereInt
  type: WhereString
}

type ExtrapolationFunction {
  id: Int!
  name: String
  predictionConfigs(predictionConfigOrderBy: PredictionConfigOrderBy, predictionConfigSkip: Int, predictionConfigTake: Int, predictionConfigWhere: PredictionConfigWhere): PredictionConfigModel!
}

"""Should be array with at least one of the values mentioned bellow."""
enum ExtrapolationFunctionGroupByEnum {
  id
}

input ExtrapolationFunctionInput {
  id: Int
  name: String
}

type ExtrapolationFunctionModel {
  count: Int!
  data: [ExtrapolationFunction!]!
}

input ExtrapolationFunctionOrderBy {
  id: EnumAscDesc
  name: EnumAscDesc
}

type ExtrapolationFunctionPayload {
  id: Int!
  name: String
}

input ExtrapolationFunctionWhere {
  id: WhereInt
  name: WhereString
}

type FloorPlan {
  file: String!
  id: Int!
  mainDeviceInstances(mainDeviceInstanceOrderBy: MainDeviceInstanceOrderBy, mainDeviceInstanceSkip: Int, mainDeviceInstanceTake: Int, mainDeviceInstanceWhere: MainDeviceInstanceWhere): MainDeviceInstanceModel!
  name: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum FloorPlanGroupByEnum {
  file
  id
}

input FloorPlanInput {
  file: String
  id: Int
  name: String
}

type FloorPlanModel {
  count: Int!
  data: [FloorPlan!]!
}

input FloorPlanOrderBy {
  file: EnumAscDesc
  id: EnumAscDesc
  name: EnumAscDesc
}

type FloorPlanPayload {
  file: String!
  id: Int!
  name: String
}

input FloorPlanWhere {
  file: WhereString
  id: WhereInt
  name: WhereString
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  password: String!
  user: String!
}

type MainDeviceClass {
  catalogName: String
  configurationFileRequired: Boolean!
  configurationOptions: JSON
  defaultExtraInfos: String
  deviceClassId: Int
  deviceClasses(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass
  id: Int!
  ipRequired: Boolean!
  mainDeviceInstances(mainDeviceInstanceOrderBy: MainDeviceInstanceOrderBy, mainDeviceInstanceSkip: Int, mainDeviceInstanceTake: Int, mainDeviceInstanceWhere: MainDeviceInstanceWhere): MainDeviceInstanceModel!
  productCategory: String!
  softwareAdapterId: Int
  softwareAdapters(softwareAdapterOrderBy: SoftwareAdapterOrderBy, softwareAdapterSkip: Int, softwareAdapterTake: Int, softwareAdapterWhere: SoftwareAdapterWhere): SoftwareAdapter
  standardPort: Int
  subinterfaces: String
  unlocked: Boolean!
}

"""Should be array with at least one of the values mentioned bellow."""
enum MainDeviceClassGroupByEnum {
  configurationFileRequired
  id
  ipRequired
  productCategory
  unlocked
}

input MainDeviceClassInput {
  catalogName: String
  configurationFileRequired: Boolean
  configurationOptions: JSON
  defaultExtraInfos: String
  deviceClassId: Int
  id: Int
  ipRequired: Boolean
  productCategory: String
  softwareAdapterId: Int
  standardPort: Int
  subinterfaces: String
  unlocked: Boolean
}

type MainDeviceClassModel {
  count: Int!
  data: [MainDeviceClass!]!
}

input MainDeviceClassOrderBy {
  catalogName: EnumAscDesc
  defaultExtraInfos: EnumAscDesc
  deviceClassId: EnumAscDesc
  id: EnumAscDesc
  productCategory: EnumAscDesc
  softwareAdapterId: EnumAscDesc
  standardPort: EnumAscDesc
  subinterfaces: EnumAscDesc
}

type MainDeviceClassPayload {
  catalogName: String
  configurationFileRequired: Boolean!
  configurationOptions: JSON
  defaultExtraInfos: String
  deviceClassId: Int
  id: Int!
  ipRequired: Boolean!
  productCategory: String!
  softwareAdapterId: Int
  standardPort: Int
  subinterfaces: String
  unlocked: Boolean!
}

input MainDeviceClassWhere {
  catalogName: WhereString
  configurationFileRequired: Boolean
  configurationOptions: JSON
  defaultExtraInfos: WhereString
  deviceClassId: WhereInt
  id: WhereInt
  ipRequired: Boolean
  productCategory: WhereString
  softwareAdapterId: WhereInt
  standardPort: WhereInt
  subinterfaces: WhereString
  unlocked: Boolean
}

type MainDeviceInstance {
  allowPDOutWrite: Boolean!
  configuration: JSON
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  extraInfos: String
  floorPlanId: Int
  floorPlans(floorPlanOrderBy: FloorPlanOrderBy, floorPlanSkip: Int, floorPlanTake: Int, floorPlanWhere: FloorPlanWhere): FloorPlan
  id: Int!
  ipAddress: String
  isSelfRegistering: Boolean!
  mac: String
  mainDeviceClass(mainDeviceClassOrderBy: MainDeviceClassOrderBy, mainDeviceClassSkip: Int, mainDeviceClassTake: Int, mainDeviceClassWhere: MainDeviceClassWhere): MainDeviceClass
  mainDeviceClassId: Int
  port: Int
  startDevices: Boolean!
  statePDOutWrite: Boolean!
  stopOnProblems: Boolean!
}

"""Should be array with at least one of the values mentioned bellow."""
enum MainDeviceInstanceGroupByEnum {
  allowPDOutWrite
  id
  isSelfRegistering
  startDevices
  statePDOutWrite
  stopOnProblems
}

input MainDeviceInstanceInput {
  allowPDOutWrite: Boolean
  configuration: JSON
  devId: Int
  extraInfos: String
  floorPlanId: Int
  id: Int
  ipAddress: String
  isSelfRegistering: Boolean
  mac: String
  mainDeviceClassId: Int
  port: Int
  startDevices: Boolean
  statePDOutWrite: Boolean
  stopOnProblems: Boolean
}

type MainDeviceInstanceModel {
  count: Int!
  data: [MainDeviceInstance!]!
}

input MainDeviceInstanceOrderBy {
  devId: EnumAscDesc
  extraInfos: EnumAscDesc
  floorPlanId: EnumAscDesc
  id: EnumAscDesc
  ipAddress: EnumAscDesc
  mac: EnumAscDesc
  mainDeviceClassId: EnumAscDesc
  port: EnumAscDesc
}

type MainDeviceInstancePayload {
  allowPDOutWrite: Boolean!
  configuration: JSON
  devId: Int
  extraInfos: String
  floorPlanId: Int
  id: Int!
  ipAddress: String
  isSelfRegistering: Boolean!
  mac: String
  mainDeviceClassId: Int
  port: Int
  startDevices: Boolean!
  statePDOutWrite: Boolean!
  stopOnProblems: Boolean!
}

input MainDeviceInstanceWhere {
  allowPDOutWrite: Boolean
  configuration: JSON
  devId: WhereInt
  extraInfos: WhereString
  floorPlanId: WhereInt
  id: WhereInt
  ipAddress: WhereString
  isSelfRegistering: Boolean
  mac: WhereString
  mainDeviceClassId: WhereInt
  port: WhereInt
  startDevices: Boolean
  statePDOutWrite: Boolean
  stopOnProblems: Boolean
}

type Maintenance {
  """the action the user has taken to fix the problem"""
  action: String
  assignee(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): User
  assigneeId: Int
  createdAt: DateTime!
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  deviceInstanceId: Int
  dueDate: DateTime!
  fixedByUser(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): User
  fixedByUserId: Int
  id: Int!
  maintenanceEndDate: DateTime
  maintenanceStartDate: DateTime
  maintenanceType(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceType
  maintenanceTypeId: Int
  predictionConfig(predictionConfigOrderBy: PredictionConfigOrderBy, predictionConfigSkip: Int, predictionConfigTake: Int, predictionConfigWhere: PredictionConfigWhere): PredictionConfig
  predictionConfigId: Int
  updatedAt: DateTime
}

type MaintenanceAlarmConfig {
  deviceClass(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass!
  deviceClassId: Int!
  eventClass(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClass!
  eventClassId: Int!
  id: Int!
  maintenanceType(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceType!
  maintenanceTypeId: Int!

  """timestamp in ms"""
  offset: BigIntString!
}

"""Should be array with at least one of the values mentioned bellow."""
enum MaintenanceAlarmConfigGroupByEnum {
  deviceClassId
  eventClassId
  id
  maintenanceTypeId
  offset
}

input MaintenanceAlarmConfigInput {
  deviceClassId: Int
  eventClassId: Int
  id: Int
  maintenanceTypeId: Int
  offset: BigIntString
}

type MaintenanceAlarmConfigModel {
  count: Int!
  data: [MaintenanceAlarmConfig!]!
}

input MaintenanceAlarmConfigOrderBy {
  deviceClassId: EnumAscDesc
  eventClassId: EnumAscDesc
  id: EnumAscDesc
  maintenanceTypeId: EnumAscDesc
}

type MaintenanceAlarmConfigPayload {
  deviceClassId: Int!
  eventClassId: Int!
  id: Int!
  maintenanceTypeId: Int!
  offset: BigIntString!
}

input MaintenanceAlarmConfigWhere {
  deviceClassId: WhereInt
  eventClassId: WhereInt
  id: WhereInt
  maintenanceTypeId: WhereInt
  offset: BigIntString
}

type MaintenanceConfig {
  createdAt: DateTime!
  deviceClass(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass
  deviceClassId: Int
  format: String
  id: Int!
  indexMaxTimeBetweenMaintenances: JSON!
  indexPerformMaintenance: JSON!
  indexPreviousMaintenanceDate: JSON!
  maintenanceType(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceType
  maintenanceTypeId: Int!
  updatedAt: DateTime
}

"""Should be array with at least one of the values mentioned bellow."""
enum MaintenanceConfigGroupByEnum {
  createdAt
  id
  indexMaxTimeBetweenMaintenances
  indexPerformMaintenance
  indexPreviousMaintenanceDate
  maintenanceTypeId
}

input MaintenanceConfigInput {
  createdAt: DateTime
  deviceClassId: Int
  format: String
  id: Int
  indexMaxTimeBetweenMaintenances: JSON
  indexPerformMaintenance: JSON
  indexPreviousMaintenanceDate: JSON
  maintenanceTypeId: Int
  updatedAt: DateTime
}

type MaintenanceConfigModel {
  count: Int!
  data: [MaintenanceConfig!]!
}

input MaintenanceConfigOrderBy {
  createdAt: EnumAscDesc
  deviceClassId: EnumAscDesc
  format: EnumAscDesc
  id: EnumAscDesc
  maintenanceTypeId: EnumAscDesc
  updatedAt: EnumAscDesc
}

type MaintenanceConfigPayload {
  createdAt: DateTime!
  deviceClassId: Int
  format: String
  id: Int!
  indexMaxTimeBetweenMaintenances: JSON!
  indexPerformMaintenance: JSON!
  indexPreviousMaintenanceDate: JSON!
  maintenanceTypeId: Int!
  updatedAt: DateTime
}

input MaintenanceConfigWhere {
  createdAt: WhereDateTime
  deviceClassId: WhereInt
  format: WhereString
  id: WhereInt
  indexMaxTimeBetweenMaintenances: JSON
  indexPerformMaintenance: JSON
  indexPreviousMaintenanceDate: JSON
  maintenanceTypeId: WhereInt
  updatedAt: WhereDateTime
}

"""Should be array with at least one of the values mentioned bellow."""
enum MaintenanceGroupByEnum {
  createdAt
  dueDate
  id
}

input MaintenanceInput {
  action: String
  assigneeId: Int
  createdAt: DateTime
  deviceInstanceId: Int
  dueDate: DateTime
  fixedByUserId: Int
  id: Int
  maintenanceEndDate: DateTime
  maintenanceStartDate: DateTime
  maintenanceTypeId: Int
  predictionConfigId: Int
  updatedAt: DateTime
}

type MaintenanceModel {
  count: Int!
  data: [Maintenance!]!
}

input MaintenanceOrderBy {
  action: EnumAscDesc
  assigneeId: EnumAscDesc
  createdAt: EnumAscDesc
  deviceInstanceId: EnumAscDesc
  dueDate: EnumAscDesc
  fixedByUserId: EnumAscDesc
  id: EnumAscDesc
  maintenanceEndDate: EnumAscDesc
  maintenanceStartDate: EnumAscDesc
  maintenanceTypeId: EnumAscDesc
  predictionConfigId: EnumAscDesc
  updatedAt: EnumAscDesc
}

type MaintenancePayload {
  action: String
  assigneeId: Int
  createdAt: DateTime!
  deviceInstanceId: Int
  dueDate: DateTime!
  fixedByUserId: Int
  id: Int!
  maintenanceEndDate: DateTime
  maintenanceStartDate: DateTime
  maintenanceTypeId: Int
  predictionConfigId: Int
  updatedAt: DateTime
}

type MaintenanceType {
  cause: String
  createdAt: DateTime!
  description: String
  deviceClass(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass
  deviceClassId: Int
  id: Int!
  impact: String
  maintenanceAlarmConfigs(maintenanceAlarmConfigOrderBy: MaintenanceAlarmConfigOrderBy, maintenanceAlarmConfigSkip: Int, maintenanceAlarmConfigTake: Int, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere): MaintenanceAlarmConfigModel!
  maintenanceConfig(maintenanceConfigOrderBy: MaintenanceConfigOrderBy, maintenanceConfigSkip: Int, maintenanceConfigTake: Int, maintenanceConfigWhere: MaintenanceConfigWhere): MaintenanceConfig
  maintenances(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!
  name: String!
  part: String
  predictionConfig(predictionConfigOrderBy: PredictionConfigOrderBy, predictionConfigSkip: Int, predictionConfigTake: Int, predictionConfigWhere: PredictionConfigWhere): PredictionConfig
  solution: String
  type: String
  updatedAt: DateTime
}

"""Should be array with at least one of the values mentioned bellow."""
enum MaintenanceTypeGroupByEnum {
  createdAt
  id
  name
}

input MaintenanceTypeInput {
  cause: String
  createdAt: DateTime
  description: String
  deviceClassId: Int
  id: Int
  impact: String
  name: String
  part: String
  solution: String
  type: String
  updatedAt: DateTime
}

type MaintenanceTypeModel {
  count: Int!
  data: [MaintenanceType!]!
}

input MaintenanceTypeOrderBy {
  cause: EnumAscDesc
  createdAt: EnumAscDesc
  description: EnumAscDesc
  deviceClassId: EnumAscDesc
  id: EnumAscDesc
  impact: EnumAscDesc
  name: EnumAscDesc
  part: EnumAscDesc
  solution: EnumAscDesc
  type: EnumAscDesc
  updatedAt: EnumAscDesc
}

type MaintenanceTypePayload {
  cause: String
  createdAt: DateTime!
  description: String
  deviceClassId: Int
  id: Int!
  impact: String
  name: String!
  part: String
  solution: String
  type: String
  updatedAt: DateTime
}

input MaintenanceTypeWhere {
  cause: WhereString
  createdAt: WhereDateTime
  description: WhereString
  deviceClassId: WhereInt
  id: WhereInt
  impact: WhereString
  name: WhereString
  part: WhereString
  solution: WhereString
  type: WhereString
  updatedAt: WhereDateTime
}

input MaintenanceWhere {
  action: WhereString
  assigneeId: WhereInt
  createdAt: WhereDateTime
  deviceInstanceId: WhereInt
  dueDate: WhereDateTime
  fixedByUserId: WhereInt
  id: WhereInt
  maintenanceEndDate: WhereDateTime
  maintenanceStartDate: WhereDateTime
  maintenanceTypeId: WhereInt
  predictionConfigId: WhereInt
  updatedAt: WhereDateTime
}

type Mutation {
  activeEventInstanceCreate(activeEventInstanceInput: ActiveEventInstanceInput!): ActiveEventInstancePayload!
  activeEventInstanceCreateMany(activeEventInstanceInput: [ActiveEventInstanceInput!]!): RowsAffectedPayload!
  activeEventInstanceDelete(activeEventInstanceWhere: ActiveEventInstanceInput!): ActiveEventInstancePayload!
  activeEventInstanceDeleteMany(activeEventInstanceWhere: ActiveEventInstanceWhere!): RowsAffectedPayload!
  activeEventInstanceUpdate(activeEventInstanceInput: ActiveEventInstanceInput!, activeEventInstanceWhere: ActiveEventInstanceInput!): ActiveEventInstancePayload!
  activeEventInstanceUpdateMany(activeEventInstanceInput: ActiveEventInstanceInput!, activeEventInstanceWhere: ActiveEventInstanceWhere!): RowsAffectedPayload!
  databaseStatusCreate(databaseStatusInput: DatabaseStatusInput!): DatabaseStatusPayload!
  databaseStatusCreateMany(databaseStatusInput: [DatabaseStatusInput!]!): RowsAffectedPayload!
  databaseStatusDelete(databaseStatusWhere: DatabaseStatusInput!): DatabaseStatusPayload!
  databaseStatusDeleteMany(databaseStatusWhere: DatabaseStatusWhere!): RowsAffectedPayload!
  databaseStatusUpdate(databaseStatusInput: DatabaseStatusInput!, databaseStatusWhere: DatabaseStatusInput!): DatabaseStatusPayload!
  databaseStatusUpdateMany(databaseStatusInput: DatabaseStatusInput!, databaseStatusWhere: DatabaseStatusWhere!): RowsAffectedPayload!
  deviceClassCreate(deviceClassInput: DeviceClassInput!): DeviceClassPayload!
  deviceClassCreateMany(deviceClassInput: [DeviceClassInput!]!): RowsAffectedPayload!
  deviceClassDelete(deviceClassWhere: DeviceClassInput!): DeviceClassPayload!
  deviceClassDeleteMany(deviceClassWhere: DeviceClassWhere!): RowsAffectedPayload!
  deviceClassUpdate(deviceClassInput: DeviceClassInput!, deviceClassWhere: DeviceClassInput!): DeviceClassPayload!
  deviceClassUpdateMany(deviceClassInput: DeviceClassInput!, deviceClassWhere: DeviceClassWhere!): RowsAffectedPayload!
  deviceControlCreate(deviceControlInput: DeviceControlInput!): DeviceControlPayload!
  deviceControlCreateMany(deviceControlInput: [DeviceControlInput!]!): RowsAffectedPayload!
  deviceControlDelete(deviceControlWhere: DeviceControlInput!): DeviceControlPayload!
  deviceControlDeleteMany(deviceControlWhere: DeviceControlWhere!): RowsAffectedPayload!
  deviceControlUpdate(deviceControlInput: DeviceControlInput!, deviceControlWhere: DeviceControlInput!): DeviceControlPayload!
  deviceControlUpdateMany(deviceControlInput: DeviceControlInput!, deviceControlWhere: DeviceControlWhere!): RowsAffectedPayload!
  deviceCycleCreate(deviceCycleInput: DeviceCycleInput!): DeviceCyclePayload!
  deviceCycleCreateMany(deviceCycleInput: [DeviceCycleInput!]!): RowsAffectedPayload!
  deviceCycleDelete(deviceCycleWhere: DeviceCycleInput!): DeviceCyclePayload!
  deviceCycleDeleteMany(deviceCycleWhere: DeviceCycleWhere!): RowsAffectedPayload!
  deviceCycleUpdate(deviceCycleInput: DeviceCycleInput!, deviceCycleWhere: DeviceCycleInput!): DeviceCyclePayload!
  deviceCycleUpdateMany(deviceCycleInput: DeviceCycleInput!, deviceCycleWhere: DeviceCycleWhere!): RowsAffectedPayload!
  deviceDataCreate(deviceDataInput: DeviceDataInput!): DeviceDataPayload!
  deviceDataCreateMany(deviceDataInput: [DeviceDataInput!]!): RowsAffectedPayload!
  deviceDataDelete(deviceDataWhere: DeviceDataInput!): DeviceDataPayload!
  deviceDataDeleteMany(deviceDataWhere: DeviceDataWhere!): RowsAffectedPayload!
  deviceDataUpdate(deviceDataInput: DeviceDataInput!, deviceDataWhere: DeviceDataInput!): DeviceDataPayload!
  deviceDataUpdateMany(deviceDataInput: DeviceDataInput!, deviceDataWhere: DeviceDataWhere!): RowsAffectedPayload!
  deviceFileCreate(deviceFileInput: DeviceFileInput!): DeviceFilePayload!
  deviceFileCreateMany(deviceFileInput: [DeviceFileInput!]!): RowsAffectedPayload!
  deviceFileDelete(deviceFileWhere: DeviceFileInput!): DeviceFilePayload!
  deviceFileDeleteMany(deviceFileWhere: DeviceFileWhere!): RowsAffectedPayload!
  deviceFileUpdate(deviceFileInput: DeviceFileInput!, deviceFileWhere: DeviceFileInput!): DeviceFilePayload!
  deviceFileUpdateMany(deviceFileInput: DeviceFileInput!, deviceFileWhere: DeviceFileWhere!): RowsAffectedPayload!
  deviceIndexDataTypeCreate(deviceIndexDataTypeInput: DeviceIndexDataTypeInput!): DeviceIndexDataTypePayload!
  deviceIndexDataTypeCreateMany(deviceIndexDataTypeInput: [DeviceIndexDataTypeInput!]!): RowsAffectedPayload!
  deviceIndexDataTypeDelete(deviceIndexDataTypeWhere: DeviceIndexDataTypeInput!): DeviceIndexDataTypePayload!
  deviceIndexDataTypeDeleteMany(deviceIndexDataTypeWhere: DeviceIndexDataTypeWhere!): RowsAffectedPayload!
  deviceIndexDataTypeUpdate(deviceIndexDataTypeInput: DeviceIndexDataTypeInput!, deviceIndexDataTypeWhere: DeviceIndexDataTypeInput!): DeviceIndexDataTypePayload!
  deviceIndexDataTypeUpdateMany(deviceIndexDataTypeInput: DeviceIndexDataTypeInput!, deviceIndexDataTypeWhere: DeviceIndexDataTypeWhere!): RowsAffectedPayload!
  deviceInstanceCreate(deviceInstanceInput: DeviceInstanceInput!): DeviceInstancePayload!
  deviceInstanceCreateMany(deviceInstanceInput: [DeviceInstanceInput!]!): RowsAffectedPayload!
  deviceInstanceDelete(deviceInstanceWhere: DeviceInstanceInput!): DeviceInstancePayload!
  deviceInstanceDeleteMany(deviceInstanceWhere: DeviceInstanceWhere!): RowsAffectedPayload!
  deviceInstanceUpdate(deviceInstanceInput: DeviceInstanceInput!, deviceInstanceWhere: DeviceInstanceInput!): DeviceInstancePayload!
  deviceInstanceUpdateMany(deviceInstanceInput: DeviceInstanceInput!, deviceInstanceWhere: DeviceInstanceWhere!): RowsAffectedPayload!
  etcHostCreate(etcHostInput: EtcHostInput!): EtcHostPayload!
  etcHostCreateMany(etcHostInput: [EtcHostInput!]!): RowsAffectedPayload!
  etcHostDelete(etcHostWhere: EtcHostInput!): EtcHostPayload!
  etcHostDeleteMany(etcHostWhere: EtcHostWhere!): RowsAffectedPayload!
  etcHostUpdate(etcHostInput: EtcHostInput!, etcHostWhere: EtcHostInput!): EtcHostPayload!
  etcHostUpdateMany(etcHostInput: EtcHostInput!, etcHostWhere: EtcHostWhere!): RowsAffectedPayload!
  eventClassCreate(eventClassInput: EventClassInput!): EventClassPayload!
  eventClassCreateMany(eventClassInput: [EventClassInput!]!): RowsAffectedPayload!
  eventClassDelete(eventClassWhere: EventClassInput!): EventClassPayload!
  eventClassDeleteMany(eventClassWhere: EventClassWhere!): RowsAffectedPayload!
  eventClassUpdate(eventClassInput: EventClassInput!, eventClassWhere: EventClassInput!): EventClassPayload!
  eventClassUpdateMany(eventClassInput: EventClassInput!, eventClassWhere: EventClassWhere!): RowsAffectedPayload!
  eventGroupCodeCreate(eventGroupCodeInput: EventGroupCodeInput!): EventGroupCodePayload!
  eventGroupCodeCreateMany(eventGroupCodeInput: [EventGroupCodeInput!]!): RowsAffectedPayload!
  eventGroupCodeDelete(eventGroupCodeWhere: EventGroupCodeInput!): EventGroupCodePayload!
  eventGroupCodeDeleteMany(eventGroupCodeWhere: EventGroupCodeWhere!): RowsAffectedPayload!
  eventGroupCodeUpdate(eventGroupCodeInput: EventGroupCodeInput!, eventGroupCodeWhere: EventGroupCodeInput!): EventGroupCodePayload!
  eventGroupCodeUpdateMany(eventGroupCodeInput: EventGroupCodeInput!, eventGroupCodeWhere: EventGroupCodeWhere!): RowsAffectedPayload!
  eventGroupCreate(eventGroupInput: EventGroupInput!): EventGroupPayload!
  eventGroupCreateMany(eventGroupInput: [EventGroupInput!]!): RowsAffectedPayload!
  eventGroupDataCreate(eventGroupDataInput: EventGroupDataInput!): EventGroupDataPayload!
  eventGroupDataCreateMany(eventGroupDataInput: [EventGroupDataInput!]!): RowsAffectedPayload!
  eventGroupDataDelete(eventGroupDataWhere: EventGroupDataInput!): EventGroupDataPayload!
  eventGroupDataDeleteMany(eventGroupDataWhere: EventGroupDataWhere!): RowsAffectedPayload!
  eventGroupDataHourAggregateCreate(eventGroupDataHourAggregateInput: EventGroupDataHourAggregateInput!): EventGroupDataHourAggregatePayload!
  eventGroupDataHourAggregateCreateMany(eventGroupDataHourAggregateInput: [EventGroupDataHourAggregateInput!]!): RowsAffectedPayload!
  eventGroupDataHourAggregateDelete(eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateInput!): EventGroupDataHourAggregatePayload!
  eventGroupDataHourAggregateDeleteMany(eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateWhere!): RowsAffectedPayload!
  eventGroupDataHourAggregateUpdate(eventGroupDataHourAggregateInput: EventGroupDataHourAggregateInput!, eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateInput!): EventGroupDataHourAggregatePayload!
  eventGroupDataHourAggregateUpdateMany(eventGroupDataHourAggregateInput: EventGroupDataHourAggregateInput!, eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateWhere!): RowsAffectedPayload!
  eventGroupDataUpdate(eventGroupDataInput: EventGroupDataInput!, eventGroupDataWhere: EventGroupDataInput!): EventGroupDataPayload!
  eventGroupDataUpdateMany(eventGroupDataInput: EventGroupDataInput!, eventGroupDataWhere: EventGroupDataWhere!): RowsAffectedPayload!
  eventGroupDelete(eventGroupWhere: EventGroupInput!): EventGroupPayload!
  eventGroupDeleteMany(eventGroupWhere: EventGroupWhere!): RowsAffectedPayload!
  eventGroupUpdate(eventGroupInput: EventGroupInput!, eventGroupWhere: EventGroupInput!): EventGroupPayload!
  eventGroupUpdateMany(eventGroupInput: EventGroupInput!, eventGroupWhere: EventGroupWhere!): RowsAffectedPayload!
  eventGroupValueCreate(eventGroupValueInput: EventGroupValueInput!): EventGroupValuePayload!
  eventGroupValueCreateMany(eventGroupValueInput: [EventGroupValueInput!]!): RowsAffectedPayload!
  eventGroupValueDelete(eventGroupValueWhere: EventGroupValueInput!): EventGroupValuePayload!
  eventGroupValueDeleteMany(eventGroupValueWhere: EventGroupValueWhere!): RowsAffectedPayload!
  eventGroupValueUpdate(eventGroupValueInput: EventGroupValueInput!, eventGroupValueWhere: EventGroupValueInput!): EventGroupValuePayload!
  eventGroupValueUpdateMany(eventGroupValueInput: EventGroupValueInput!, eventGroupValueWhere: EventGroupValueWhere!): RowsAffectedPayload!
  eventInstanceCreate(eventInstanceInput: EventInstanceInput!): EventInstancePayload!
  eventInstanceCreateMany(eventInstanceInput: [EventInstanceInput!]!): RowsAffectedPayload!
  eventInstanceDelete(eventInstanceWhere: EventInstanceInput!): EventInstancePayload!
  eventInstanceDeleteMany(eventInstanceWhere: EventInstanceWhere!): RowsAffectedPayload!
  eventInstanceUpdate(eventInstanceInput: EventInstanceInput!, eventInstanceWhere: EventInstanceInput!): EventInstancePayload!
  eventInstanceUpdateMany(eventInstanceInput: EventInstanceInput!, eventInstanceWhere: EventInstanceWhere!): RowsAffectedPayload!
  eventTypeCreate(eventTypeInput: EventTypeInput!): EventTypePayload!
  eventTypeCreateMany(eventTypeInput: [EventTypeInput!]!): RowsAffectedPayload!
  eventTypeDelete(eventTypeWhere: EventTypeInput!): EventTypePayload!
  eventTypeDeleteMany(eventTypeWhere: EventTypeWhere!): RowsAffectedPayload!
  eventTypeUpdate(eventTypeInput: EventTypeInput!, eventTypeWhere: EventTypeInput!): EventTypePayload!
  eventTypeUpdateMany(eventTypeInput: EventTypeInput!, eventTypeWhere: EventTypeWhere!): RowsAffectedPayload!
  extrapolationFunctionCreate(extrapolationFunctionInput: ExtrapolationFunctionInput!): ExtrapolationFunctionPayload!
  extrapolationFunctionCreateMany(extrapolationFunctionInput: [ExtrapolationFunctionInput!]!): RowsAffectedPayload!
  extrapolationFunctionDelete(extrapolationFunctionWhere: ExtrapolationFunctionInput!): ExtrapolationFunctionPayload!
  extrapolationFunctionDeleteMany(extrapolationFunctionWhere: ExtrapolationFunctionWhere!): RowsAffectedPayload!
  extrapolationFunctionUpdate(extrapolationFunctionInput: ExtrapolationFunctionInput!, extrapolationFunctionWhere: ExtrapolationFunctionInput!): ExtrapolationFunctionPayload!
  extrapolationFunctionUpdateMany(extrapolationFunctionInput: ExtrapolationFunctionInput!, extrapolationFunctionWhere: ExtrapolationFunctionWhere!): RowsAffectedPayload!
  floorPlanCreate(floorPlanInput: FloorPlanInput!): FloorPlanPayload!
  floorPlanCreateMany(floorPlanInput: [FloorPlanInput!]!): RowsAffectedPayload!
  floorPlanDelete(floorPlanWhere: FloorPlanInput!): FloorPlanPayload!
  floorPlanDeleteMany(floorPlanWhere: FloorPlanWhere!): RowsAffectedPayload!
  floorPlanUpdate(floorPlanInput: FloorPlanInput!, floorPlanWhere: FloorPlanInput!): FloorPlanPayload!
  floorPlanUpdateMany(floorPlanInput: FloorPlanInput!, floorPlanWhere: FloorPlanWhere!): RowsAffectedPayload!
  login(input: LoginInput!): AuthPayload!
  logout: User!
  mainDeviceClassCreate(mainDeviceClassInput: MainDeviceClassInput!): MainDeviceClassPayload!
  mainDeviceClassCreateMany(mainDeviceClassInput: [MainDeviceClassInput!]!): RowsAffectedPayload!
  mainDeviceClassDelete(mainDeviceClassWhere: MainDeviceClassInput!): MainDeviceClassPayload!
  mainDeviceClassDeleteMany(mainDeviceClassWhere: MainDeviceClassWhere!): RowsAffectedPayload!
  mainDeviceClassUpdate(mainDeviceClassInput: MainDeviceClassInput!, mainDeviceClassWhere: MainDeviceClassInput!): MainDeviceClassPayload!
  mainDeviceClassUpdateMany(mainDeviceClassInput: MainDeviceClassInput!, mainDeviceClassWhere: MainDeviceClassWhere!): RowsAffectedPayload!
  mainDeviceInstanceCreate(mainDeviceInstanceInput: MainDeviceInstanceInput!): MainDeviceInstancePayload!
  mainDeviceInstanceCreateMany(mainDeviceInstanceInput: [MainDeviceInstanceInput!]!): RowsAffectedPayload!
  mainDeviceInstanceDelete(mainDeviceInstanceWhere: MainDeviceInstanceInput!): MainDeviceInstancePayload!
  mainDeviceInstanceDeleteMany(mainDeviceInstanceWhere: MainDeviceInstanceWhere!): RowsAffectedPayload!
  mainDeviceInstanceUpdate(mainDeviceInstanceInput: MainDeviceInstanceInput!, mainDeviceInstanceWhere: MainDeviceInstanceInput!): MainDeviceInstancePayload!
  mainDeviceInstanceUpdateMany(mainDeviceInstanceInput: MainDeviceInstanceInput!, mainDeviceInstanceWhere: MainDeviceInstanceWhere!): RowsAffectedPayload!
  maintenanceAlarmConfigCreate(maintenanceAlarmConfigInput: MaintenanceAlarmConfigInput!): MaintenanceAlarmConfigPayload!
  maintenanceAlarmConfigCreateMany(maintenanceAlarmConfigInput: [MaintenanceAlarmConfigInput!]!): RowsAffectedPayload!
  maintenanceAlarmConfigDelete(maintenanceAlarmConfigWhere: MaintenanceAlarmConfigInput!): MaintenanceAlarmConfigPayload!
  maintenanceAlarmConfigDeleteMany(maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere!): RowsAffectedPayload!
  maintenanceAlarmConfigUpdate(maintenanceAlarmConfigInput: MaintenanceAlarmConfigInput!, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigInput!): MaintenanceAlarmConfigPayload!
  maintenanceAlarmConfigUpdateMany(maintenanceAlarmConfigInput: MaintenanceAlarmConfigInput!, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere!): RowsAffectedPayload!
  maintenanceConfigCreate(maintenanceConfigInput: MaintenanceConfigInput!): MaintenanceConfigPayload!
  maintenanceConfigCreateMany(maintenanceConfigInput: [MaintenanceConfigInput!]!): RowsAffectedPayload!
  maintenanceConfigDelete(maintenanceConfigWhere: MaintenanceConfigInput!): MaintenanceConfigPayload!
  maintenanceConfigDeleteMany(maintenanceConfigWhere: MaintenanceConfigWhere!): RowsAffectedPayload!
  maintenanceConfigUpdate(maintenanceConfigInput: MaintenanceConfigInput!, maintenanceConfigWhere: MaintenanceConfigInput!): MaintenanceConfigPayload!
  maintenanceConfigUpdateMany(maintenanceConfigInput: MaintenanceConfigInput!, maintenanceConfigWhere: MaintenanceConfigWhere!): RowsAffectedPayload!
  maintenanceCreate(maintenanceInput: MaintenanceInput!): MaintenancePayload!
  maintenanceCreateMany(maintenanceInput: [MaintenanceInput!]!): RowsAffectedPayload!
  maintenanceDelete(maintenanceWhere: MaintenanceInput!): MaintenancePayload!
  maintenanceDeleteMany(maintenanceWhere: MaintenanceWhere!): RowsAffectedPayload!
  maintenanceTypeCreate(maintenanceTypeInput: MaintenanceTypeInput!): MaintenanceTypePayload!
  maintenanceTypeCreateMany(maintenanceTypeInput: [MaintenanceTypeInput!]!): RowsAffectedPayload!
  maintenanceTypeDelete(maintenanceTypeWhere: MaintenanceTypeInput!): MaintenanceTypePayload!
  maintenanceTypeDeleteMany(maintenanceTypeWhere: MaintenanceTypeWhere!): RowsAffectedPayload!
  maintenanceTypeUpdate(maintenanceTypeInput: MaintenanceTypeInput!, maintenanceTypeWhere: MaintenanceTypeInput!): MaintenanceTypePayload!
  maintenanceTypeUpdateMany(maintenanceTypeInput: MaintenanceTypeInput!, maintenanceTypeWhere: MaintenanceTypeWhere!): RowsAffectedPayload!
  maintenanceUpdate(maintenanceInput: MaintenanceInput!, maintenanceWhere: MaintenanceInput!): MaintenancePayload!
  maintenanceUpdateMany(maintenanceInput: MaintenanceInput!, maintenanceWhere: MaintenanceWhere!): RowsAffectedPayload!
  performanceIndicatorConfigCreate(performanceIndicatorConfigInput: PerformanceIndicatorConfigInput!): PerformanceIndicatorConfigPayload!
  performanceIndicatorConfigCreateMany(performanceIndicatorConfigInput: [PerformanceIndicatorConfigInput!]!): RowsAffectedPayload!
  performanceIndicatorConfigDelete(performanceIndicatorConfigWhere: PerformanceIndicatorConfigInput!): PerformanceIndicatorConfigPayload!
  performanceIndicatorConfigDeleteMany(performanceIndicatorConfigWhere: PerformanceIndicatorConfigWhere!): RowsAffectedPayload!
  performanceIndicatorConfigUpdate(performanceIndicatorConfigInput: PerformanceIndicatorConfigInput!, performanceIndicatorConfigWhere: PerformanceIndicatorConfigInput!): PerformanceIndicatorConfigPayload!
  performanceIndicatorConfigUpdateMany(performanceIndicatorConfigInput: PerformanceIndicatorConfigInput!, performanceIndicatorConfigWhere: PerformanceIndicatorConfigWhere!): RowsAffectedPayload!
  predictionConfigCreate(predictionConfigInput: PredictionConfigInput!): PredictionConfigPayload!
  predictionConfigCreateMany(predictionConfigInput: [PredictionConfigInput!]!): RowsAffectedPayload!
  predictionConfigDelete(predictionConfigWhere: PredictionConfigInput!): PredictionConfigPayload!
  predictionConfigDeleteMany(predictionConfigWhere: PredictionConfigWhere!): RowsAffectedPayload!
  predictionConfigUpdate(predictionConfigInput: PredictionConfigInput!, predictionConfigWhere: PredictionConfigInput!): PredictionConfigPayload!
  predictionConfigUpdateMany(predictionConfigInput: PredictionConfigInput!, predictionConfigWhere: PredictionConfigWhere!): RowsAffectedPayload!
  privilegeCreate(privilegeInput: PrivilegeInput!): PrivilegePayload!
  privilegeCreateMany(privilegeInput: [PrivilegeInput!]!): RowsAffectedPayload!
  privilegeDelete(privilegeWhere: PrivilegeInput!): PrivilegePayload!
  privilegeDeleteMany(privilegeWhere: PrivilegeWhere!): RowsAffectedPayload!
  privilegeUpdate(privilegeInput: PrivilegeInput!, privilegeWhere: PrivilegeInput!): PrivilegePayload!
  privilegeUpdateMany(privilegeInput: PrivilegeInput!, privilegeWhere: PrivilegeWhere!): RowsAffectedPayload!
  processDataConditionCreate(processDataConditionInput: ProcessDataConditionInput!): ProcessDataConditionPayload!
  processDataConditionCreateMany(processDataConditionInput: [ProcessDataConditionInput!]!): RowsAffectedPayload!
  processDataConditionDelete(processDataConditionWhere: ProcessDataConditionInput!): ProcessDataConditionPayload!
  processDataConditionDeleteMany(processDataConditionWhere: ProcessDataConditionWhere!): RowsAffectedPayload!
  processDataConditionUpdate(processDataConditionInput: ProcessDataConditionInput!, processDataConditionWhere: ProcessDataConditionInput!): ProcessDataConditionPayload!
  processDataConditionUpdateMany(processDataConditionInput: ProcessDataConditionInput!, processDataConditionWhere: ProcessDataConditionWhere!): RowsAffectedPayload!
  processDataCreate(processDataInput: ProcessDataInput!): ProcessDataPayload!
  processDataCreateMany(processDataInput: [ProcessDataInput!]!): RowsAffectedPayload!
  processDataDelete(processDataWhere: ProcessDataInput!): ProcessDataPayload!
  processDataDeleteMany(processDataWhere: ProcessDataWhere!): RowsAffectedPayload!
  processDataModeCreate(processDataModeInput: ProcessDataModeInput!): ProcessDataModePayload!
  processDataModeCreateMany(processDataModeInput: [ProcessDataModeInput!]!): RowsAffectedPayload!
  processDataModeDelete(processDataModeWhere: ProcessDataModeInput!): ProcessDataModePayload!
  processDataModeDeleteMany(processDataModeWhere: ProcessDataModeWhere!): RowsAffectedPayload!
  processDataModeUpdate(processDataModeInput: ProcessDataModeInput!, processDataModeWhere: ProcessDataModeInput!): ProcessDataModePayload!
  processDataModeUpdateMany(processDataModeInput: ProcessDataModeInput!, processDataModeWhere: ProcessDataModeWhere!): RowsAffectedPayload!
  processDataUpdate(processDataInput: ProcessDataInput!, processDataWhere: ProcessDataInput!): ProcessDataPayload!
  processDataUpdateMany(processDataInput: ProcessDataInput!, processDataWhere: ProcessDataWhere!): RowsAffectedPayload!
  refreshAuth: AuthPayload!
  registrationStatusCreate(registrationStatusInput: RegistrationStatusInput!): RegistrationStatusPayload!
  registrationStatusCreateMany(registrationStatusInput: [RegistrationStatusInput!]!): RowsAffectedPayload!
  registrationStatusDelete(registrationStatusWhere: RegistrationStatusInput!): RegistrationStatusPayload!
  registrationStatusDeleteMany(registrationStatusWhere: RegistrationStatusWhere!): RowsAffectedPayload!
  registrationStatusUpdate(registrationStatusInput: RegistrationStatusInput!, registrationStatusWhere: RegistrationStatusInput!): RegistrationStatusPayload!
  registrationStatusUpdateMany(registrationStatusInput: RegistrationStatusInput!, registrationStatusWhere: RegistrationStatusWhere!): RowsAffectedPayload!
  replayConfigCreate(replayConfigInput: ReplayConfigInput!): ReplayConfigPayload!
  replayConfigCreateMany(replayConfigInput: [ReplayConfigInput!]!): RowsAffectedPayload!
  replayConfigDelete(replayConfigWhere: ReplayConfigInput!): ReplayConfigPayload!
  replayConfigDeleteMany(replayConfigWhere: ReplayConfigWhere!): RowsAffectedPayload!
  replayConfigUpdate(replayConfigInput: ReplayConfigInput!, replayConfigWhere: ReplayConfigInput!): ReplayConfigPayload!
  replayConfigUpdateMany(replayConfigInput: ReplayConfigInput!, replayConfigWhere: ReplayConfigWhere!): RowsAffectedPayload!
  replayDataCreate(replayDataInput: ReplayDataInput!): ReplayDataPayload!
  replayDataCreateMany(replayDataInput: [ReplayDataInput!]!): RowsAffectedPayload!
  replayDataDelete(replayDataWhere: ReplayDataInput!): ReplayDataPayload!
  replayDataDeleteMany(replayDataWhere: ReplayDataWhere!): RowsAffectedPayload!
  replayDataUpdate(replayDataInput: ReplayDataInput!, replayDataWhere: ReplayDataInput!): ReplayDataPayload!
  replayDataUpdateMany(replayDataInput: ReplayDataInput!, replayDataWhere: ReplayDataWhere!): RowsAffectedPayload!
  replaySetCreate(replaySetInput: ReplaySetInput!): ReplaySetPayload!
  replaySetCreateMany(replaySetInput: [ReplaySetInput!]!): RowsAffectedPayload!
  replaySetDelete(replaySetWhere: ReplaySetInput!): ReplaySetPayload!
  replaySetDeleteMany(replaySetWhere: ReplaySetWhere!): RowsAffectedPayload!
  replaySetUpdate(replaySetInput: ReplaySetInput!, replaySetWhere: ReplaySetInput!): ReplaySetPayload!
  replaySetUpdateMany(replaySetInput: ReplaySetInput!, replaySetWhere: ReplaySetWhere!): RowsAffectedPayload!
  reportTypeCreate(reportTypeInput: ReportTypeInput!): ReportTypePayload!
  reportTypeCreateMany(reportTypeInput: [ReportTypeInput!]!): RowsAffectedPayload!
  reportTypeDelete(reportTypeWhere: ReportTypeInput!): ReportTypePayload!
  reportTypeDeleteMany(reportTypeWhere: ReportTypeWhere!): RowsAffectedPayload!
  reportTypeUpdate(reportTypeInput: ReportTypeInput!, reportTypeWhere: ReportTypeInput!): ReportTypePayload!
  reportTypeUpdateMany(reportTypeInput: ReportTypeInput!, reportTypeWhere: ReportTypeWhere!): RowsAffectedPayload!
  reportingConfigCreate(reportingConfigInput: ReportingConfigInput!): ReportingConfigPayload!
  reportingConfigCreateMany(reportingConfigInput: [ReportingConfigInput!]!): RowsAffectedPayload!
  reportingConfigDelete(reportingConfigWhere: ReportingConfigInput!): ReportingConfigPayload!
  reportingConfigDeleteMany(reportingConfigWhere: ReportingConfigWhere!): RowsAffectedPayload!
  reportingConfigUpdate(reportingConfigInput: ReportingConfigInput!, reportingConfigWhere: ReportingConfigInput!): ReportingConfigPayload!
  reportingConfigUpdateMany(reportingConfigInput: ReportingConfigInput!, reportingConfigWhere: ReportingConfigWhere!): RowsAffectedPayload!
  reportingCreate(reportingInput: ReportingInput!): ReportingPayload!
  reportingCreateMany(reportingInput: [ReportingInput!]!): RowsAffectedPayload!
  reportingDelete(reportingWhere: ReportingInput!): ReportingPayload!
  reportingDeleteMany(reportingWhere: ReportingWhere!): RowsAffectedPayload!
  reportingUpdate(reportingInput: ReportingInput!, reportingWhere: ReportingInput!): ReportingPayload!
  reportingUpdateMany(reportingInput: ReportingInput!, reportingWhere: ReportingWhere!): RowsAffectedPayload!
  representationCreate(representationInput: RepresentationInput!): RepresentationPayload!
  representationCreateMany(representationInput: [RepresentationInput!]!): RowsAffectedPayload!
  representationDelete(representationWhere: RepresentationInput!): RepresentationPayload!
  representationDeleteMany(representationWhere: RepresentationWhere!): RowsAffectedPayload!
  representationUpdate(representationInput: RepresentationInput!, representationWhere: RepresentationInput!): RepresentationPayload!
  representationUpdateMany(representationInput: RepresentationInput!, representationWhere: RepresentationWhere!): RowsAffectedPayload!
  roleCreate(roleInput: RoleInput!): RolePayload!
  roleCreateMany(roleInput: [RoleInput!]!): RowsAffectedPayload!
  roleDelete(roleWhere: RoleInput!): RolePayload!
  roleDeleteMany(roleWhere: RoleWhere!): RowsAffectedPayload!
  rolePrivilegeCreate(rolePrivilegeInput: RolePrivilegeInput!): RolePrivilegePayload!
  rolePrivilegeCreateMany(rolePrivilegeInput: [RolePrivilegeInput!]!): RowsAffectedPayload!
  rolePrivilegeDelete(rolePrivilegeWhere: RolePrivilegeInput!): RolePrivilegePayload!
  rolePrivilegeDeleteMany(rolePrivilegeWhere: RolePrivilegeWhere!): RowsAffectedPayload!
  rolePrivilegeUpdate(rolePrivilegeInput: RolePrivilegeInput!, rolePrivilegeWhere: RolePrivilegeInput!): RolePrivilegePayload!
  rolePrivilegeUpdateMany(rolePrivilegeInput: RolePrivilegeInput!, rolePrivilegeWhere: RolePrivilegeWhere!): RowsAffectedPayload!
  roleUpdate(roleInput: RoleInput!, roleWhere: RoleInput!): RolePayload!
  roleUpdateMany(roleInput: RoleInput!, roleWhere: RoleWhere!): RowsAffectedPayload!
  signup(input: SignupInput!): AuthPayload
  softwareAdapterCreate(softwareAdapterInput: SoftwareAdapterInput!): SoftwareAdapterPayload!
  softwareAdapterCreateMany(softwareAdapterInput: [SoftwareAdapterInput!]!): RowsAffectedPayload!
  softwareAdapterDelete(softwareAdapterWhere: SoftwareAdapterInput!): SoftwareAdapterPayload!
  softwareAdapterDeleteMany(softwareAdapterWhere: SoftwareAdapterWhere!): RowsAffectedPayload!
  softwareAdapterUpdate(softwareAdapterInput: SoftwareAdapterInput!, softwareAdapterWhere: SoftwareAdapterInput!): SoftwareAdapterPayload!
  softwareAdapterUpdateMany(softwareAdapterInput: SoftwareAdapterInput!, softwareAdapterWhere: SoftwareAdapterWhere!): RowsAffectedPayload!
  taskCreate(taskInput: TaskInput!): TaskPayload!
  taskCreateMany(taskInput: [TaskInput!]!): RowsAffectedPayload!
  taskDelete(taskWhere: TaskInput!): TaskPayload!
  taskDeleteMany(taskWhere: TaskWhere!): RowsAffectedPayload!
  taskUpdate(taskInput: TaskInput!, taskWhere: TaskInput!): TaskPayload!
  taskUpdateMany(taskInput: TaskInput!, taskWhere: TaskWhere!): RowsAffectedPayload!
  timeseriesCreate(timeseriesInput: TimeseriesInput!): TimeseriesPayload!
  timeseriesCreateMany(timeseriesInput: [TimeseriesInput!]!): RowsAffectedPayload!
  timeseriesDataCreate(timeseriesDataInput: TimeseriesDataInput!): TimeseriesDataPayload!
  timeseriesDataCreateMany(timeseriesDataInput: [TimeseriesDataInput!]!): RowsAffectedPayload!
  timeseriesDataDelete(timeseriesDataWhere: TimeseriesDataInput!): TimeseriesDataPayload!
  timeseriesDataDeleteMany(timeseriesDataWhere: TimeseriesDataWhere!): RowsAffectedPayload!
  timeseriesDataHourAggregateCreate(timeseriesDataHourAggregateInput: TimeseriesDataHourAggregateInput!): TimeseriesDataHourAggregatePayload!
  timeseriesDataHourAggregateCreateMany(timeseriesDataHourAggregateInput: [TimeseriesDataHourAggregateInput!]!): RowsAffectedPayload!
  timeseriesDataHourAggregateDelete(timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateInput!): TimeseriesDataHourAggregatePayload!
  timeseriesDataHourAggregateDeleteMany(timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateWhere!): RowsAffectedPayload!
  timeseriesDataHourAggregateUpdate(timeseriesDataHourAggregateInput: TimeseriesDataHourAggregateInput!, timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateInput!): TimeseriesDataHourAggregatePayload!
  timeseriesDataHourAggregateUpdateMany(timeseriesDataHourAggregateInput: TimeseriesDataHourAggregateInput!, timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateWhere!): RowsAffectedPayload!
  timeseriesDataUpdate(timeseriesDataInput: TimeseriesDataInput!, timeseriesDataWhere: TimeseriesDataInput!): TimeseriesDataPayload!
  timeseriesDataUpdateMany(timeseriesDataInput: TimeseriesDataInput!, timeseriesDataWhere: TimeseriesDataWhere!): RowsAffectedPayload!
  timeseriesDelete(timeseriesWhere: TimeseriesInput!): TimeseriesPayload!
  timeseriesDeleteMany(timeseriesWhere: TimeseriesWhere!): RowsAffectedPayload!
  timeseriesUpdate(timeseriesInput: TimeseriesInput!, timeseriesWhere: TimeseriesInput!): TimeseriesPayload!
  timeseriesUpdateMany(timeseriesInput: TimeseriesInput!, timeseriesWhere: TimeseriesWhere!): RowsAffectedPayload!
  updaterConfigCreate(updaterConfigInput: UpdaterConfigInput!): UpdaterConfigPayload!
  updaterConfigCreateMany(updaterConfigInput: [UpdaterConfigInput!]!): RowsAffectedPayload!
  updaterConfigDelete(updaterConfigWhere: UpdaterConfigInput!): UpdaterConfigPayload!
  updaterConfigDeleteMany(updaterConfigWhere: UpdaterConfigWhere!): RowsAffectedPayload!
  updaterConfigUpdate(updaterConfigInput: UpdaterConfigInput!, updaterConfigWhere: UpdaterConfigInput!): UpdaterConfigPayload!
  updaterConfigUpdateMany(updaterConfigInput: UpdaterConfigInput!, updaterConfigWhere: UpdaterConfigWhere!): RowsAffectedPayload!
  userCreate(userInput: UserInput!): UserPayload!
  userCreateMany(userInput: [UserInput!]!): RowsAffectedPayload!
  userDelete(userWhere: UserInput!): UserPayload!
  userDeleteMany(userWhere: UserWhere!): RowsAffectedPayload!
  userRoleCreate(userRoleInput: UserRoleInput!): UserRolePayload!
  userRoleCreateMany(userRoleInput: [UserRoleInput!]!): RowsAffectedPayload!
  userRoleDelete(userRoleWhere: UserRoleInput!): UserRolePayload!
  userRoleDeleteMany(userRoleWhere: UserRoleWhere!): RowsAffectedPayload!
  userRoleUpdate(userRoleInput: UserRoleInput!, userRoleWhere: UserRoleInput!): UserRolePayload!
  userRoleUpdateMany(userRoleInput: UserRoleInput!, userRoleWhere: UserRoleWhere!): RowsAffectedPayload!
  userUpdate(userInput: UserInput!, userWhere: UserInput!): UserPayload!
  userUpdateMany(userInput: UserInput!, userWhere: UserWhere!): RowsAffectedPayload!
  vendorCreate(vendorInput: VendorInput!): VendorPayload!
  vendorCreateMany(vendorInput: [VendorInput!]!): RowsAffectedPayload!
  vendorDelete(vendorWhere: VendorInput!): VendorPayload!
  vendorDeleteMany(vendorWhere: VendorWhere!): RowsAffectedPayload!
  vendorUpdate(vendorInput: VendorInput!, vendorWhere: VendorInput!): VendorPayload!
  vendorUpdateMany(vendorInput: VendorInput!, vendorWhere: VendorWhere!): RowsAffectedPayload!
  xConfigCreate(xConfigInput: XConfigInput!): XConfigPayload!
  xConfigCreateMany(xConfigInput: [XConfigInput!]!): RowsAffectedPayload!
  xConfigDelete(xConfigWhere: XConfigInput!): XConfigPayload!
  xConfigDeleteMany(xConfigWhere: XConfigWhere!): RowsAffectedPayload!
  xConfigUpdate(xConfigInput: XConfigInput!, xConfigWhere: XConfigInput!): XConfigPayload!
  xConfigUpdateMany(xConfigInput: XConfigInput!, xConfigWhere: XConfigWhere!): RowsAffectedPayload!
}

type PerformanceIndicatorConfig {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  index: String
  maxValue: Decimal
}

"""Should be array with at least one of the values mentioned bellow."""
enum PerformanceIndicatorConfigGroupByEnum {
  id
}

input PerformanceIndicatorConfigInput {
  devId: Int
  id: Int
  index: String
  maxValue: Decimal
}

type PerformanceIndicatorConfigModel {
  count: Int!
  data: [PerformanceIndicatorConfig!]!
}

input PerformanceIndicatorConfigOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  index: EnumAscDesc
  maxValue: EnumAscDesc
}

type PerformanceIndicatorConfigPayload {
  devId: Int
  id: Int!
  index: String
  maxValue: Decimal
}

input PerformanceIndicatorConfigWhere {
  devId: WhereInt
  id: WhereInt
  index: WhereString
  maxValue: WhereString
}

type PredictionConfig {
  """@zod.custom(z.object({}).nullish())"""
  currentValue: JSON
  deviceClass(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClass!
  deviceClassId: Int!
  extrapolationFunction(extrapolationFunctionOrderBy: ExtrapolationFunctionOrderBy, extrapolationFunctionSkip: Int, extrapolationFunctionTake: Int, extrapolationFunctionWhere: ExtrapolationFunctionWhere): ExtrapolationFunction!
  extrapolationFunctionId: Int!

  """@zod.nullable()"""
  id: Int!
  identifier: Int!
  indexMaxTimeBetweenMaintenances: JSON
  indexPerformMaintenance: JSON!
  indexPreviousMaintenanceDate: JSON!
  maintenanceType(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceType!
  maintenanceTypeId: Int!
  maintenances(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!

  """@zod.custom(z.object({}).nullish())"""
  maxValue: JSON
  rangeAttribute: String
  rangeEnd: DateTime
  rangeStart: DateTime
  type: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum PredictionConfigGroupByEnum {
  deviceClassId
  extrapolationFunctionId
  id
  identifier
  indexPerformMaintenance
  indexPreviousMaintenanceDate
  maintenanceTypeId
}

input PredictionConfigInput {
  currentValue: JSON
  deviceClassId: Int
  extrapolationFunctionId: Int
  id: Int
  identifier: Int
  indexMaxTimeBetweenMaintenances: JSON
  indexPerformMaintenance: JSON
  indexPreviousMaintenanceDate: JSON
  maintenanceTypeId: Int
  maxValue: JSON
  rangeAttribute: String
  rangeEnd: DateTime
  rangeStart: DateTime
  type: String
}

type PredictionConfigModel {
  count: Int!
  data: [PredictionConfig!]!
}

input PredictionConfigOrderBy {
  deviceClassId: EnumAscDesc
  extrapolationFunctionId: EnumAscDesc
  id: EnumAscDesc
  identifier: EnumAscDesc
  maintenanceTypeId: EnumAscDesc
  rangeAttribute: EnumAscDesc
  rangeEnd: EnumAscDesc
  rangeStart: EnumAscDesc
  type: EnumAscDesc
}

type PredictionConfigPayload {
  currentValue: JSON
  deviceClassId: Int!
  extrapolationFunctionId: Int!
  id: Int!
  identifier: Int!
  indexMaxTimeBetweenMaintenances: JSON
  indexPerformMaintenance: JSON!
  indexPreviousMaintenanceDate: JSON!
  maintenanceTypeId: Int!
  maxValue: JSON
  rangeAttribute: String
  rangeEnd: DateTime
  rangeStart: DateTime
  type: String
}

input PredictionConfigWhere {
  currentValue: JSON
  deviceClassId: WhereInt
  extrapolationFunctionId: WhereInt
  id: WhereInt
  identifier: WhereInt
  indexMaxTimeBetweenMaintenances: JSON
  indexPerformMaintenance: JSON
  indexPreviousMaintenanceDate: JSON
  maintenanceTypeId: WhereInt
  maxValue: JSON
  rangeAttribute: WhereString
  rangeEnd: WhereDateTime
  rangeStart: WhereDateTime
  type: WhereString
}

type Privilege {
  description: String
  id: Int!
  privilege: String
  rolePrivileges(rolePrivilegeOrderBy: RolePrivilegeOrderBy, rolePrivilegeSkip: Int, rolePrivilegeTake: Int, rolePrivilegeWhere: RolePrivilegeWhere): RolePrivilegeModel!
}

"""Should be array with at least one of the values mentioned bellow."""
enum PrivilegeGroupByEnum {
  id
}

input PrivilegeInput {
  description: String
  id: Int
  privilege: String
}

type PrivilegeModel {
  count: Int!
  data: [Privilege!]!
}

input PrivilegeOrderBy {
  description: EnumAscDesc
  id: EnumAscDesc
  privilege: EnumAscDesc
}

type PrivilegePayload {
  description: String
  id: Int!
  privilege: String
}

input PrivilegeWhere {
  description: WhereString
  id: WhereInt
  privilege: WhereString
}

type ProcessData {
  access: String
  active: Boolean
  bitLength: Int
  bitOffset: Int
  byteOrder: String
  conditionId: Int
  defaultValue: String
  devId: Int!
  deviceIndexDataTypeId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  dynamic: Boolean
  gradient: String
  id: Int!
  index: Int
  label: String
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  offset: String
  parameterDescriptor: String
  parameterGroup0: String
  parameterGroup1: String
  parameterGroup2: String
  parameterGroup3: String
  parameterId: String
  processDataCondition(processDataConditionOrderBy: ProcessDataConditionOrderBy, processDataConditionSkip: Int, processDataConditionTake: Int, processDataConditionWhere: ProcessDataConditionWhere): ProcessDataCondition
  range: String
  remark: String
  representationId: Int
  requestObject: String
  resolution: String
  samplingRate: Int
  subBitLength: Int
  subDataTypeId: Int
  subParameterDescriptor: String
  subRange: String
  subindex: Int
  subindexAccessSupported: Boolean
  subtopicId: Int
  unit: String
  value: String
}

type ProcessDataCondition {
  id: Int!
  index: Int
  processData(processDataOrderBy: ProcessDataOrderBy, processDataSkip: Int, processDataTake: Int, processDataWhere: ProcessDataWhere): ProcessDataModel!
  subindex: Int
  value: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum ProcessDataConditionGroupByEnum {
  id
}

input ProcessDataConditionInput {
  id: Int
  index: Int
  subindex: Int
  value: String
}

type ProcessDataConditionModel {
  count: Int!
  data: [ProcessDataCondition!]!
}

input ProcessDataConditionOrderBy {
  id: EnumAscDesc
  index: EnumAscDesc
  subindex: EnumAscDesc
  value: EnumAscDesc
}

type ProcessDataConditionPayload {
  id: Int!
  index: Int
  subindex: Int
  value: String
}

input ProcessDataConditionWhere {
  id: WhereInt
  index: WhereInt
  subindex: WhereInt
  value: WhereString
}

"""Should be array with at least one of the values mentioned bellow."""
enum ProcessDataGroupByEnum {
  devId
  id
}

input ProcessDataInput {
  access: String
  active: Boolean
  bitLength: Int
  bitOffset: Int
  byteOrder: String
  conditionId: Int
  defaultValue: String
  devId: Int
  deviceIndexDataTypeId: Int
  dynamic: Boolean
  gradient: String
  id: Int
  index: Int
  label: String
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  offset: String
  parameterDescriptor: String
  parameterGroup0: String
  parameterGroup1: String
  parameterGroup2: String
  parameterGroup3: String
  parameterId: String
  range: String
  remark: String
  representationId: Int
  requestObject: String
  resolution: String
  samplingRate: Int
  subBitLength: Int
  subDataTypeId: Int
  subParameterDescriptor: String
  subRange: String
  subindex: Int
  subindexAccessSupported: Boolean
  subtopicId: Int
  unit: String
  value: String
}

type ProcessDataMode {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  messageSize: Int
  minimalSamplingTime: Int
  name: String
  samplingTimeUnit: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum ProcessDataModeGroupByEnum {
  id
}

input ProcessDataModeInput {
  devId: Int
  id: Int
  messageSize: Int
  minimalSamplingTime: Int
  name: String
  samplingTimeUnit: String
}

type ProcessDataModeModel {
  count: Int!
  data: [ProcessDataMode!]!
}

input ProcessDataModeOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  messageSize: EnumAscDesc
  minimalSamplingTime: EnumAscDesc
  name: EnumAscDesc
  samplingTimeUnit: EnumAscDesc
}

type ProcessDataModePayload {
  devId: Int
  id: Int!
  messageSize: Int
  minimalSamplingTime: Int
  name: String
  samplingTimeUnit: String
}

input ProcessDataModeWhere {
  devId: WhereInt
  id: WhereInt
  messageSize: WhereInt
  minimalSamplingTime: WhereInt
  name: WhereString
  samplingTimeUnit: WhereString
}

type ProcessDataModel {
  count: Int!
  data: [ProcessData!]!
}

input ProcessDataOrderBy {
  access: EnumAscDesc
  bitLength: EnumAscDesc
  bitOffset: EnumAscDesc
  byteOrder: EnumAscDesc
  conditionId: EnumAscDesc
  defaultValue: EnumAscDesc
  devId: EnumAscDesc
  deviceIndexDataTypeId: EnumAscDesc
  gradient: EnumAscDesc
  id: EnumAscDesc
  index: EnumAscDesc
  label: EnumAscDesc
  mqttLabel: EnumAscDesc
  mqttName: EnumAscDesc
  offset: EnumAscDesc
  parameterDescriptor: EnumAscDesc
  parameterGroup0: EnumAscDesc
  parameterGroup1: EnumAscDesc
  parameterGroup2: EnumAscDesc
  parameterGroup3: EnumAscDesc
  parameterId: EnumAscDesc
  range: EnumAscDesc
  remark: EnumAscDesc
  representationId: EnumAscDesc
  requestObject: EnumAscDesc
  resolution: EnumAscDesc
  samplingRate: EnumAscDesc
  subBitLength: EnumAscDesc
  subDataTypeId: EnumAscDesc
  subParameterDescriptor: EnumAscDesc
  subRange: EnumAscDesc
  subindex: EnumAscDesc
  subtopicId: EnumAscDesc
  unit: EnumAscDesc
  value: EnumAscDesc
}

type ProcessDataPayload {
  access: String
  active: Boolean
  bitLength: Int
  bitOffset: Int
  byteOrder: String
  conditionId: Int
  defaultValue: String
  devId: Int!
  deviceIndexDataTypeId: Int
  dynamic: Boolean
  gradient: String
  id: Int!
  index: Int
  label: String
  modifiesOtherVariables: Boolean
  mqttLabel: String
  mqttName: String
  offset: String
  parameterDescriptor: String
  parameterGroup0: String
  parameterGroup1: String
  parameterGroup2: String
  parameterGroup3: String
  parameterId: String
  range: String
  remark: String
  representationId: Int
  requestObject: String
  resolution: String
  samplingRate: Int
  subBitLength: Int
  subDataTypeId: Int
  subParameterDescriptor: String
  subRange: String
  subindex: Int
  subindexAccessSupported: Boolean
  subtopicId: Int
  unit: String
  value: String
}

input ProcessDataWhere {
  access: WhereString
  active: Boolean
  bitLength: WhereInt
  bitOffset: WhereInt
  byteOrder: WhereString
  conditionId: WhereInt
  defaultValue: WhereString
  devId: WhereInt
  deviceIndexDataTypeId: WhereInt
  dynamic: Boolean
  gradient: WhereString
  id: WhereInt
  index: WhereInt
  label: WhereString
  modifiesOtherVariables: Boolean
  mqttLabel: WhereString
  mqttName: WhereString
  offset: WhereString
  parameterDescriptor: WhereString
  parameterGroup0: WhereString
  parameterGroup1: WhereString
  parameterGroup2: WhereString
  parameterGroup3: WhereString
  parameterId: WhereString
  range: WhereString
  remark: WhereString
  representationId: WhereInt
  requestObject: WhereString
  resolution: WhereString
  samplingRate: WhereInt
  subBitLength: WhereInt
  subDataTypeId: WhereInt
  subParameterDescriptor: WhereString
  subRange: WhereString
  subindex: WhereInt
  subindexAccessSupported: Boolean
  subtopicId: WhereInt
  unit: WhereString
  value: WhereString
}

type Query {
  activeEventInstanceQuery(activeEventInstanceOrderBy: ActiveEventInstanceOrderBy, activeEventInstanceSkip: Int, activeEventInstanceTake: Int, activeEventInstanceWhere: ActiveEventInstanceWhere): ActiveEventInstanceModel!
  databaseStatusQuery(databaseStatusOrderBy: DatabaseStatusOrderBy, databaseStatusSkip: Int, databaseStatusTake: Int, databaseStatusWhere: DatabaseStatusWhere): DatabaseStatusModel!
  deviceClassQuery(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClassModel!
  deviceControlQuery(deviceControlOrderBy: DeviceControlOrderBy, deviceControlSkip: Int, deviceControlTake: Int, deviceControlWhere: DeviceControlWhere): DeviceControlModel!
  deviceCycleQuery(deviceCycleOrderBy: DeviceCycleOrderBy, deviceCycleSkip: Int, deviceCycleTake: Int, deviceCycleWhere: DeviceCycleWhere): DeviceCycleModel!
  deviceDataQuery(deviceDataOrderBy: DeviceDataOrderBy, deviceDataSkip: Int, deviceDataTake: Int, deviceDataWhere: DeviceDataWhere): DeviceDataModel!
  deviceFileQuery(deviceFileOrderBy: DeviceFileOrderBy, deviceFileSkip: Int, deviceFileTake: Int, deviceFileWhere: DeviceFileWhere): DeviceFileModel!
  deviceIndexDataTypeQuery(deviceIndexDataTypeOrderBy: DeviceIndexDataTypeOrderBy, deviceIndexDataTypeSkip: Int, deviceIndexDataTypeTake: Int, deviceIndexDataTypeWhere: DeviceIndexDataTypeWhere): DeviceIndexDataTypeModel!
  deviceInstanceQuery(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstanceModel!
  etcHostQuery(etcHostOrderBy: EtcHostOrderBy, etcHostSkip: Int, etcHostTake: Int, etcHostWhere: EtcHostWhere): EtcHostModel!
  eventClassQuery(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClassModel!
  eventGroupCodeQuery(eventGroupCodeOrderBy: EventGroupCodeOrderBy, eventGroupCodeSkip: Int, eventGroupCodeTake: Int, eventGroupCodeWhere: EventGroupCodeWhere): EventGroupCodeModel!
  eventGroupDataHourAggregateQuery(eventGroupDataHourAggregateOrderBy: EventGroupDataHourAggregateOrderBy, eventGroupDataHourAggregateSkip: Int, eventGroupDataHourAggregateTake: Int, eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateWhere): EventGroupDataHourAggregateModel!
  eventGroupDataQuery(eventGroupDataOrderBy: EventGroupDataOrderBy, eventGroupDataSkip: Int, eventGroupDataTake: Int, eventGroupDataWhere: EventGroupDataWhere): EventGroupDataModel!
  eventGroupQuery(eventGroupOrderBy: EventGroupOrderBy, eventGroupSkip: Int, eventGroupTake: Int, eventGroupWhere: EventGroupWhere): EventGroupModel!
  eventGroupValueQuery(eventGroupValueOrderBy: EventGroupValueOrderBy, eventGroupValueSkip: Int, eventGroupValueTake: Int, eventGroupValueWhere: EventGroupValueWhere): EventGroupValueModel!
  eventInstanceQuery(eventInstanceOrderBy: EventInstanceOrderBy, eventInstanceSkip: Int, eventInstanceTake: Int, eventInstanceWhere: EventInstanceWhere): EventInstanceModel!
  eventTypeQuery(eventTypeOrderBy: EventTypeOrderBy, eventTypeSkip: Int, eventTypeTake: Int, eventTypeWhere: EventTypeWhere): EventTypeModel!
  extrapolationFunctionQuery(extrapolationFunctionOrderBy: ExtrapolationFunctionOrderBy, extrapolationFunctionSkip: Int, extrapolationFunctionTake: Int, extrapolationFunctionWhere: ExtrapolationFunctionWhere): ExtrapolationFunctionModel!
  floorPlanQuery(floorPlanOrderBy: FloorPlanOrderBy, floorPlanSkip: Int, floorPlanTake: Int, floorPlanWhere: FloorPlanWhere): FloorPlanModel!
  mainDeviceClassQuery(mainDeviceClassOrderBy: MainDeviceClassOrderBy, mainDeviceClassSkip: Int, mainDeviceClassTake: Int, mainDeviceClassWhere: MainDeviceClassWhere): MainDeviceClassModel!
  mainDeviceInstanceQuery(mainDeviceInstanceOrderBy: MainDeviceInstanceOrderBy, mainDeviceInstanceSkip: Int, mainDeviceInstanceTake: Int, mainDeviceInstanceWhere: MainDeviceInstanceWhere): MainDeviceInstanceModel!
  maintenanceAlarmConfigQuery(maintenanceAlarmConfigOrderBy: MaintenanceAlarmConfigOrderBy, maintenanceAlarmConfigSkip: Int, maintenanceAlarmConfigTake: Int, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere): MaintenanceAlarmConfigModel!
  maintenanceConfigQuery(maintenanceConfigOrderBy: MaintenanceConfigOrderBy, maintenanceConfigSkip: Int, maintenanceConfigTake: Int, maintenanceConfigWhere: MaintenanceConfigWhere): MaintenanceConfigModel!
  maintenanceQuery(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!
  maintenanceTypeQuery(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceTypeModel!
  performanceIndicatorConfigQuery(performanceIndicatorConfigOrderBy: PerformanceIndicatorConfigOrderBy, performanceIndicatorConfigSkip: Int, performanceIndicatorConfigTake: Int, performanceIndicatorConfigWhere: PerformanceIndicatorConfigWhere): PerformanceIndicatorConfigModel!
  predictionConfigQuery(predictionConfigOrderBy: PredictionConfigOrderBy, predictionConfigSkip: Int, predictionConfigTake: Int, predictionConfigWhere: PredictionConfigWhere): PredictionConfigModel!
  privilegeQuery(privilegeOrderBy: PrivilegeOrderBy, privilegeSkip: Int, privilegeTake: Int, privilegeWhere: PrivilegeWhere): PrivilegeModel!
  processDataConditionQuery(processDataConditionOrderBy: ProcessDataConditionOrderBy, processDataConditionSkip: Int, processDataConditionTake: Int, processDataConditionWhere: ProcessDataConditionWhere): ProcessDataConditionModel!
  processDataModeQuery(processDataModeOrderBy: ProcessDataModeOrderBy, processDataModeSkip: Int, processDataModeTake: Int, processDataModeWhere: ProcessDataModeWhere): ProcessDataModeModel!
  processDataQuery(processDataOrderBy: ProcessDataOrderBy, processDataSkip: Int, processDataTake: Int, processDataWhere: ProcessDataWhere): ProcessDataModel!
  registrationStatusQuery(registrationStatusOrderBy: RegistrationStatusOrderBy, registrationStatusSkip: Int, registrationStatusTake: Int, registrationStatusWhere: RegistrationStatusWhere): RegistrationStatusModel!
  replayConfigQuery(replayConfigOrderBy: ReplayConfigOrderBy, replayConfigSkip: Int, replayConfigTake: Int, replayConfigWhere: ReplayConfigWhere): ReplayConfigModel!
  replayDataQuery(replayDataOrderBy: ReplayDataOrderBy, replayDataSkip: Int, replayDataTake: Int, replayDataWhere: ReplayDataWhere): ReplayDataModel!
  replaySetQuery(replaySetOrderBy: ReplaySetOrderBy, replaySetSkip: Int, replaySetTake: Int, replaySetWhere: ReplaySetWhere): ReplaySetModel!
  reportTypeQuery(reportTypeOrderBy: ReportTypeOrderBy, reportTypeSkip: Int, reportTypeTake: Int, reportTypeWhere: ReportTypeWhere): ReportTypeModel!
  reportingConfigQuery(reportingConfigOrderBy: ReportingConfigOrderBy, reportingConfigSkip: Int, reportingConfigTake: Int, reportingConfigWhere: ReportingConfigWhere): ReportingConfigModel!
  reportingQuery(reportingOrderBy: ReportingOrderBy, reportingSkip: Int, reportingTake: Int, reportingWhere: ReportingWhere): ReportingModel!
  representationQuery(representationOrderBy: RepresentationOrderBy, representationSkip: Int, representationTake: Int, representationWhere: RepresentationWhere): RepresentationModel!
  rolePrivilegeQuery(rolePrivilegeOrderBy: RolePrivilegeOrderBy, rolePrivilegeSkip: Int, rolePrivilegeTake: Int, rolePrivilegeWhere: RolePrivilegeWhere): RolePrivilegeModel!
  roleQuery(roleOrderBy: RoleOrderBy, roleSkip: Int, roleTake: Int, roleWhere: RoleWhere): RoleModel!
  softwareAdapterQuery(softwareAdapterOrderBy: SoftwareAdapterOrderBy, softwareAdapterSkip: Int, softwareAdapterTake: Int, softwareAdapterWhere: SoftwareAdapterWhere): SoftwareAdapterModel!
  taskQuery(taskOrderBy: TaskOrderBy, taskSkip: Int, taskTake: Int, taskWhere: TaskWhere): TaskModel!
  timeseriesDataHourAggregateQuery(timeseriesDataHourAggregateOrderBy: TimeseriesDataHourAggregateOrderBy, timeseriesDataHourAggregateSkip: Int, timeseriesDataHourAggregateTake: Int, timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateWhere): TimeseriesDataHourAggregateModel!
  timeseriesDataQuery(timeseriesDataOrderBy: TimeseriesDataOrderBy, timeseriesDataSkip: Int, timeseriesDataTake: Int, timeseriesDataWhere: TimeseriesDataWhere): TimeseriesDataModel!
  timeseriesQuery(timeseriesOrderBy: TimeseriesOrderBy, timeseriesSkip: Int, timeseriesTake: Int, timeseriesWhere: TimeseriesWhere): TimeseriesModel!
  updaterConfigQuery(updaterConfigOrderBy: UpdaterConfigOrderBy, updaterConfigSkip: Int, updaterConfigTake: Int, updaterConfigWhere: UpdaterConfigWhere): UpdaterConfigModel!
  userQuery(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): UserModel!
  userRoleQuery(userRoleOrderBy: UserRoleOrderBy, userRoleSkip: Int, userRoleTake: Int, userRoleWhere: UserRoleWhere): UserRoleModel!
  vendorQuery(vendorOrderBy: VendorOrderBy, vendorSkip: Int, vendorTake: Int, vendorWhere: VendorWhere): VendorModel!
  xConfigQuery(xConfigOrderBy: XConfigOrderBy, xConfigSkip: Int, xConfigTake: Int, xConfigWhere: XConfigWhere): XConfigModel!
}

type RegistrationStatus {
  deviceInstances(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstanceModel!
  id: Int!
  status: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum RegistrationStatusGroupByEnum {
  id
}

input RegistrationStatusInput {
  id: Int
  status: String
}

type RegistrationStatusModel {
  count: Int!
  data: [RegistrationStatus!]!
}

input RegistrationStatusOrderBy {
  id: EnumAscDesc
  status: EnumAscDesc
}

type RegistrationStatusPayload {
  id: Int!
  status: String
}

input RegistrationStatusWhere {
  id: WhereInt
  status: WhereString
}

type ReplayConfig {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  triggers: JSON
  valueMap: JSON
}

"""Should be array with at least one of the values mentioned bellow."""
enum ReplayConfigGroupByEnum {
  id
}

input ReplayConfigInput {
  devId: Int
  id: Int
  triggers: JSON
  valueMap: JSON
}

type ReplayConfigModel {
  count: Int!
  data: [ReplayConfig!]!
}

input ReplayConfigOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
}

type ReplayConfigPayload {
  devId: Int
  id: Int!
  triggers: JSON
  valueMap: JSON
}

input ReplayConfigWhere {
  devId: WhereInt
  id: WhereInt
  triggers: JSON
  valueMap: JSON
}

type ReplayData {
  id: Int!
  replaySet(replaySetOrderBy: ReplaySetOrderBy, replaySetSkip: Int, replaySetTake: Int, replaySetWhere: ReplaySetWhere): ReplaySet
  replaySetId: Int
  timestamp: DateTime!
  y1: Decimal
  y2: Decimal
  y3: Decimal
  y4: Decimal
  y5: Decimal
  y6: Decimal
  y7: Decimal
  y8: Decimal
  y9: Decimal
  y10: Decimal
  y11: Decimal
  y12: Decimal
  y13: Decimal
  y14: Decimal
  y15: Decimal
  y16: Decimal
  y17: Decimal
  y18: Decimal
  y19: Decimal
  y20: Decimal
  y21: Decimal
  y22: Decimal
  y23: Decimal
  y24: Decimal
  y25: Decimal
  y26: Decimal
  y27: Decimal
  y28: Decimal
  y29: Decimal
  y30: Decimal
}

"""Should be array with at least one of the values mentioned bellow."""
enum ReplayDataGroupByEnum {
  id
  timestamp
}

input ReplayDataInput {
  id: Int
  replaySetId: Int
  timestamp: DateTime
  y1: Decimal
  y2: Decimal
  y3: Decimal
  y4: Decimal
  y5: Decimal
  y6: Decimal
  y7: Decimal
  y8: Decimal
  y9: Decimal
  y10: Decimal
  y11: Decimal
  y12: Decimal
  y13: Decimal
  y14: Decimal
  y15: Decimal
  y16: Decimal
  y17: Decimal
  y18: Decimal
  y19: Decimal
  y20: Decimal
  y21: Decimal
  y22: Decimal
  y23: Decimal
  y24: Decimal
  y25: Decimal
  y26: Decimal
  y27: Decimal
  y28: Decimal
  y29: Decimal
  y30: Decimal
}

type ReplayDataModel {
  count: Int!
  data: [ReplayData!]!
}

input ReplayDataOrderBy {
  id: EnumAscDesc
  replaySetId: EnumAscDesc
  timestamp: EnumAscDesc
  y1: EnumAscDesc
  y2: EnumAscDesc
  y3: EnumAscDesc
  y4: EnumAscDesc
  y5: EnumAscDesc
  y6: EnumAscDesc
  y7: EnumAscDesc
  y8: EnumAscDesc
  y9: EnumAscDesc
  y10: EnumAscDesc
  y11: EnumAscDesc
  y12: EnumAscDesc
  y13: EnumAscDesc
  y14: EnumAscDesc
  y15: EnumAscDesc
  y16: EnumAscDesc
  y17: EnumAscDesc
  y18: EnumAscDesc
  y19: EnumAscDesc
  y20: EnumAscDesc
  y21: EnumAscDesc
  y22: EnumAscDesc
  y23: EnumAscDesc
  y24: EnumAscDesc
  y25: EnumAscDesc
  y26: EnumAscDesc
  y27: EnumAscDesc
  y28: EnumAscDesc
  y29: EnumAscDesc
  y30: EnumAscDesc
}

type ReplayDataPayload {
  id: Int!
  replaySetId: Int
  timestamp: DateTime!
  y1: Decimal
  y2: Decimal
  y3: Decimal
  y4: Decimal
  y5: Decimal
  y6: Decimal
  y7: Decimal
  y8: Decimal
  y9: Decimal
  y10: Decimal
  y11: Decimal
  y12: Decimal
  y13: Decimal
  y14: Decimal
  y15: Decimal
  y16: Decimal
  y17: Decimal
  y18: Decimal
  y19: Decimal
  y20: Decimal
  y21: Decimal
  y22: Decimal
  y23: Decimal
  y24: Decimal
  y25: Decimal
  y26: Decimal
  y27: Decimal
  y28: Decimal
  y29: Decimal
  y30: Decimal
}

input ReplayDataWhere {
  id: WhereInt
  replaySetId: WhereInt
  timestamp: WhereDateTime
  y1: WhereString
  y2: WhereString
  y3: WhereString
  y4: WhereString
  y5: WhereString
  y6: WhereString
  y7: WhereString
  y8: WhereString
  y9: WhereString
  y10: WhereString
  y11: WhereString
  y12: WhereString
  y13: WhereString
  y14: WhereString
  y15: WhereString
  y16: WhereString
  y17: WhereString
  y18: WhereString
  y19: WhereString
  y20: WhereString
  y21: WhereString
  y22: WhereString
  y23: WhereString
  y24: WhereString
  y25: WhereString
  y26: WhereString
  y27: WhereString
  y28: WhereString
  y29: WhereString
  y30: WhereString
}

type ReplaySet {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  eventClass(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClass
  eventClassId: Int
  id: Int!
  label: String
  replayData(replayDataOrderBy: ReplayDataOrderBy, replayDataSkip: Int, replayDataTake: Int, replayDataWhere: ReplayDataWhere): ReplayDataModel!
  timestamp: DateTime!
}

"""Should be array with at least one of the values mentioned bellow."""
enum ReplaySetGroupByEnum {
  id
  timestamp
}

input ReplaySetInput {
  devId: Int
  eventClassId: Int
  id: Int
  label: String
  timestamp: DateTime
}

type ReplaySetModel {
  count: Int!
  data: [ReplaySet!]!
}

input ReplaySetOrderBy {
  devId: EnumAscDesc
  eventClassId: EnumAscDesc
  id: EnumAscDesc
  label: EnumAscDesc
  timestamp: EnumAscDesc
}

type ReplaySetPayload {
  devId: Int
  eventClassId: Int
  id: Int!
  label: String
  timestamp: DateTime!
}

input ReplaySetWhere {
  devId: WhereInt
  eventClassId: WhereInt
  id: WhereInt
  label: WhereString
  timestamp: WhereDateTime
}

type ReportType {
  chapters: JSON
  contentType: String
  defaultOptions: String
  devices: JSON
  fileNameSchema: String
  id: Int!
  information: String
  mailBody: String
  name: String
  tasks(taskOrderBy: TaskOrderBy, taskSkip: Int, taskTake: Int, taskWhere: TaskWhere): TaskModel!
}

"""Should be array with at least one of the values mentioned bellow."""
enum ReportTypeGroupByEnum {
  id
}

input ReportTypeInput {
  chapters: JSON
  contentType: String
  defaultOptions: String
  devices: JSON
  fileNameSchema: String
  id: Int
  information: String
  mailBody: String
  name: String
}

type ReportTypeModel {
  count: Int!
  data: [ReportType!]!
}

input ReportTypeOrderBy {
  contentType: EnumAscDesc
  defaultOptions: EnumAscDesc
  fileNameSchema: EnumAscDesc
  id: EnumAscDesc
  information: EnumAscDesc
  mailBody: EnumAscDesc
  name: EnumAscDesc
}

type ReportTypePayload {
  chapters: JSON
  contentType: String
  defaultOptions: String
  devices: JSON
  fileNameSchema: String
  id: Int!
  information: String
  mailBody: String
  name: String
}

input ReportTypeWhere {
  chapters: JSON
  contentType: WhereString
  defaultOptions: WhereString
  devices: JSON
  fileNameSchema: WhereString
  id: WhereInt
  information: WhereString
  mailBody: WhereString
  name: WhereString
}

type Reporting {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  source: String
  timestamp: DateTime!
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
  y1: Decimal
  y2: Decimal
  y3: Decimal
  y4: Decimal
  y5: Decimal
  y6: Decimal
  y7: Decimal
  y8: Decimal
  y9: Decimal
  y10: Decimal
  y11: Decimal
  y12: Decimal
  y13: Decimal
  y14: Decimal
  y15: Decimal
  y16: Decimal
  y17: Decimal
  y18: Decimal
  y19: Decimal
  y20: Decimal
  y21: Decimal
  y22: Decimal
  y23: Decimal
  y24: Decimal
  y25: Decimal
  y26: Decimal
  y27: Decimal
  y28: Decimal
  y29: Decimal
  y30: Decimal
}

type ReportingConfig {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  summaryAccess: JSON
  trigger: JSON
  valueMap: JSON
}

"""Should be array with at least one of the values mentioned bellow."""
enum ReportingConfigGroupByEnum {
  id
}

input ReportingConfigInput {
  devId: Int
  id: Int
  summaryAccess: JSON
  trigger: JSON
  valueMap: JSON
}

type ReportingConfigModel {
  count: Int!
  data: [ReportingConfig!]!
}

input ReportingConfigOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
}

type ReportingConfigPayload {
  devId: Int
  id: Int!
  summaryAccess: JSON
  trigger: JSON
  valueMap: JSON
}

input ReportingConfigWhere {
  devId: WhereInt
  id: WhereInt
  summaryAccess: JSON
  trigger: JSON
  valueMap: JSON
}

"""Should be array with at least one of the values mentioned bellow."""
enum ReportingGroupByEnum {
  id
  timestamp
}

input ReportingInput {
  devId: Int
  id: Int
  source: String
  timestamp: DateTime
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
  y1: Decimal
  y2: Decimal
  y3: Decimal
  y4: Decimal
  y5: Decimal
  y6: Decimal
  y7: Decimal
  y8: Decimal
  y9: Decimal
  y10: Decimal
  y11: Decimal
  y12: Decimal
  y13: Decimal
  y14: Decimal
  y15: Decimal
  y16: Decimal
  y17: Decimal
  y18: Decimal
  y19: Decimal
  y20: Decimal
  y21: Decimal
  y22: Decimal
  y23: Decimal
  y24: Decimal
  y25: Decimal
  y26: Decimal
  y27: Decimal
  y28: Decimal
  y29: Decimal
  y30: Decimal
}

type ReportingModel {
  count: Int!
  data: [Reporting!]!
}

input ReportingOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  source: EnumAscDesc
  timestamp: EnumAscDesc
  x1: EnumAscDesc
  x2: EnumAscDesc
  x3: EnumAscDesc
  x4: EnumAscDesc
  y1: EnumAscDesc
  y2: EnumAscDesc
  y3: EnumAscDesc
  y4: EnumAscDesc
  y5: EnumAscDesc
  y6: EnumAscDesc
  y7: EnumAscDesc
  y8: EnumAscDesc
  y9: EnumAscDesc
  y10: EnumAscDesc
  y11: EnumAscDesc
  y12: EnumAscDesc
  y13: EnumAscDesc
  y14: EnumAscDesc
  y15: EnumAscDesc
  y16: EnumAscDesc
  y17: EnumAscDesc
  y18: EnumAscDesc
  y19: EnumAscDesc
  y20: EnumAscDesc
  y21: EnumAscDesc
  y22: EnumAscDesc
  y23: EnumAscDesc
  y24: EnumAscDesc
  y25: EnumAscDesc
  y26: EnumAscDesc
  y27: EnumAscDesc
  y28: EnumAscDesc
  y29: EnumAscDesc
  y30: EnumAscDesc
}

type ReportingPayload {
  devId: Int
  id: Int!
  source: String
  timestamp: DateTime!
  x1: Decimal
  x2: Decimal
  x3: Decimal
  x4: Decimal
  y1: Decimal
  y2: Decimal
  y3: Decimal
  y4: Decimal
  y5: Decimal
  y6: Decimal
  y7: Decimal
  y8: Decimal
  y9: Decimal
  y10: Decimal
  y11: Decimal
  y12: Decimal
  y13: Decimal
  y14: Decimal
  y15: Decimal
  y16: Decimal
  y17: Decimal
  y18: Decimal
  y19: Decimal
  y20: Decimal
  y21: Decimal
  y22: Decimal
  y23: Decimal
  y24: Decimal
  y25: Decimal
  y26: Decimal
  y27: Decimal
  y28: Decimal
  y29: Decimal
  y30: Decimal
}

input ReportingWhere {
  devId: WhereInt
  id: WhereInt
  source: WhereString
  timestamp: WhereDateTime
  x1: WhereString
  x2: WhereString
  x3: WhereString
  x4: WhereString
  y1: WhereString
  y2: WhereString
  y3: WhereString
  y4: WhereString
  y5: WhereString
  y6: WhereString
  y7: WhereString
  y8: WhereString
  y9: WhereString
  y10: WhereString
  y11: WhereString
  y12: WhereString
  y13: WhereString
  y14: WhereString
  y15: WhereString
  y16: WhereString
  y17: WhereString
  y18: WhereString
  y19: WhereString
  y20: WhereString
  y21: WhereString
  y22: WhereString
  y23: WhereString
  y24: WhereString
  y25: WhereString
  y26: WhereString
  y27: WhereString
  y28: WhereString
  y29: WhereString
  y30: WhereString
}

type Representation {
  description: String
  id: Int!
  name: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum RepresentationGroupByEnum {
  id
}

input RepresentationInput {
  description: String
  id: Int
  name: String
}

type RepresentationModel {
  count: Int!
  data: [Representation!]!
}

input RepresentationOrderBy {
  description: EnumAscDesc
  id: EnumAscDesc
  name: EnumAscDesc
}

type RepresentationPayload {
  description: String
  id: Int!
  name: String
}

input RepresentationWhere {
  description: WhereString
  id: WhereInt
  name: WhereString
}

type Role {
  description: String
  id: Int!
  name: String
  rolePrivileges(rolePrivilegeOrderBy: RolePrivilegeOrderBy, rolePrivilegeSkip: Int, rolePrivilegeTake: Int, rolePrivilegeWhere: RolePrivilegeWhere): RolePrivilegeModel!
  system: Boolean
  tasks(taskOrderBy: TaskOrderBy, taskSkip: Int, taskTake: Int, taskWhere: TaskWhere): TaskModel!
  userRoles(userRoleOrderBy: UserRoleOrderBy, userRoleSkip: Int, userRoleTake: Int, userRoleWhere: UserRoleWhere): UserRoleModel!
}

"""Should be array with at least one of the values mentioned bellow."""
enum RoleGroupByEnum {
  id
}

input RoleInput {
  description: String
  id: Int
  name: String
  system: Boolean
}

type RoleModel {
  count: Int!
  data: [Role!]!
}

input RoleOrderBy {
  description: EnumAscDesc
  id: EnumAscDesc
  name: EnumAscDesc
}

type RolePayload {
  description: String
  id: Int!
  name: String
  system: Boolean
}

type RolePrivilege {
  id: Int!
  privilege(privilegeOrderBy: PrivilegeOrderBy, privilegeSkip: Int, privilegeTake: Int, privilegeWhere: PrivilegeWhere): Privilege
  privilegeId: Int
  role(roleOrderBy: RoleOrderBy, roleSkip: Int, roleTake: Int, roleWhere: RoleWhere): Role
  roleId: Int
}

"""Should be array with at least one of the values mentioned bellow."""
enum RolePrivilegeGroupByEnum {
  id
}

input RolePrivilegeInput {
  id: Int
  privilegeId: Int
  roleId: Int
}

type RolePrivilegeModel {
  count: Int!
  data: [RolePrivilege!]!
}

input RolePrivilegeOrderBy {
  id: EnumAscDesc
  privilegeId: EnumAscDesc
  roleId: EnumAscDesc
}

type RolePrivilegePayload {
  id: Int!
  privilegeId: Int
  roleId: Int
}

input RolePrivilegeWhere {
  id: WhereInt
  privilegeId: WhereInt
  roleId: WhereInt
}

input RoleWhere {
  description: WhereString
  id: WhereInt
  name: WhereString
  system: Boolean
}

type RowsAffectedPayload {
  count: Int!
}

input SignupInput {
  email: String!
  firstname: String!
  lastname: String!
  pass: String!
  system: Boolean!
  user: String!
}

type SoftwareAdapter {
  description: String!
  dockerImage: String
  id: Int!
  imageFile: String!
  isIntern: Boolean!
  mainDeviceClasses(mainDeviceClassOrderBy: MainDeviceClassOrderBy, mainDeviceClassSkip: Int, mainDeviceClassTake: Int, mainDeviceClassWhere: MainDeviceClassWhere): MainDeviceClassModel!
  name: String!
  orderCode: String!
  productName: String!
  revision: String
  vendorId: BigIntString!
  vendors(vendorOrderBy: VendorOrderBy, vendorSkip: Int, vendorTake: Int, vendorWhere: VendorWhere): Vendor!
}

"""Should be array with at least one of the values mentioned bellow."""
enum SoftwareAdapterGroupByEnum {
  description
  id
  imageFile
  isIntern
  name
  orderCode
  productName
  vendorId
}

input SoftwareAdapterInput {
  description: String
  dockerImage: String
  id: Int
  imageFile: String
  isIntern: Boolean
  name: String
  orderCode: String
  productName: String
  revision: String
  vendorId: BigIntString
}

type SoftwareAdapterModel {
  count: Int!
  data: [SoftwareAdapter!]!
}

input SoftwareAdapterOrderBy {
  description: EnumAscDesc
  dockerImage: EnumAscDesc
  id: EnumAscDesc
  imageFile: EnumAscDesc
  name: EnumAscDesc
  orderCode: EnumAscDesc
  productName: EnumAscDesc
  revision: EnumAscDesc
}

type SoftwareAdapterPayload {
  description: String!
  dockerImage: String
  id: Int!
  imageFile: String!
  isIntern: Boolean!
  name: String!
  orderCode: String!
  productName: String!
  revision: String
  vendorId: BigIntString!
}

input SoftwareAdapterWhere {
  description: WhereString
  dockerImage: WhereString
  id: WhereInt
  imageFile: WhereString
  isIntern: Boolean
  name: WhereString
  orderCode: WhereString
  productName: WhereString
  revision: WhereString
  vendorId: BigIntString
}

type Subscription {
  activeEventInstanceSubscription(activeEventInstanceOrderBy: ActiveEventInstanceOrderBy, activeEventInstanceSkip: Int, activeEventInstanceTake: Int, activeEventInstanceWhere: ActiveEventInstanceWhere): ActiveEventInstanceModel!
  databaseStatusSubscription(databaseStatusOrderBy: DatabaseStatusOrderBy, databaseStatusSkip: Int, databaseStatusTake: Int, databaseStatusWhere: DatabaseStatusWhere): DatabaseStatusModel!
  deviceClassSubscription(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClassModel!
  deviceControlSubscription(deviceControlOrderBy: DeviceControlOrderBy, deviceControlSkip: Int, deviceControlTake: Int, deviceControlWhere: DeviceControlWhere): DeviceControlModel!
  deviceCycleSubscription(deviceCycleOrderBy: DeviceCycleOrderBy, deviceCycleSkip: Int, deviceCycleTake: Int, deviceCycleWhere: DeviceCycleWhere): DeviceCycleModel!
  deviceDataSubscription(deviceDataOrderBy: DeviceDataOrderBy, deviceDataSkip: Int, deviceDataTake: Int, deviceDataWhere: DeviceDataWhere): DeviceDataModel!
  deviceFileSubscription(deviceFileOrderBy: DeviceFileOrderBy, deviceFileSkip: Int, deviceFileTake: Int, deviceFileWhere: DeviceFileWhere): DeviceFileModel!
  deviceIndexDataTypeSubscription(deviceIndexDataTypeOrderBy: DeviceIndexDataTypeOrderBy, deviceIndexDataTypeSkip: Int, deviceIndexDataTypeTake: Int, deviceIndexDataTypeWhere: DeviceIndexDataTypeWhere): DeviceIndexDataTypeModel!
  deviceInstanceSubscription(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstanceModel!
  etcHostSubscription(etcHostOrderBy: EtcHostOrderBy, etcHostSkip: Int, etcHostTake: Int, etcHostWhere: EtcHostWhere): EtcHostModel!
  eventClassSubscription(eventClassOrderBy: EventClassOrderBy, eventClassSkip: Int, eventClassTake: Int, eventClassWhere: EventClassWhere): EventClassModel!
  eventGroupCodeSubscription(eventGroupCodeOrderBy: EventGroupCodeOrderBy, eventGroupCodeSkip: Int, eventGroupCodeTake: Int, eventGroupCodeWhere: EventGroupCodeWhere): EventGroupCodeModel!
  eventGroupDataHourAggregateSubscription(eventGroupDataHourAggregateOrderBy: EventGroupDataHourAggregateOrderBy, eventGroupDataHourAggregateSkip: Int, eventGroupDataHourAggregateTake: Int, eventGroupDataHourAggregateWhere: EventGroupDataHourAggregateWhere): EventGroupDataHourAggregateModel!
  eventGroupDataSubscription(eventGroupDataOrderBy: EventGroupDataOrderBy, eventGroupDataSkip: Int, eventGroupDataTake: Int, eventGroupDataWhere: EventGroupDataWhere): EventGroupDataModel!
  eventGroupSubscription(eventGroupOrderBy: EventGroupOrderBy, eventGroupSkip: Int, eventGroupTake: Int, eventGroupWhere: EventGroupWhere): EventGroupModel!
  eventGroupValueSubscription(eventGroupValueOrderBy: EventGroupValueOrderBy, eventGroupValueSkip: Int, eventGroupValueTake: Int, eventGroupValueWhere: EventGroupValueWhere): EventGroupValueModel!
  eventInstanceSubscription(eventInstanceOrderBy: EventInstanceOrderBy, eventInstanceSkip: Int, eventInstanceTake: Int, eventInstanceWhere: EventInstanceWhere): EventInstanceModel!
  eventTypeSubscription(eventTypeOrderBy: EventTypeOrderBy, eventTypeSkip: Int, eventTypeTake: Int, eventTypeWhere: EventTypeWhere): EventTypeModel!
  extrapolationFunctionSubscription(extrapolationFunctionOrderBy: ExtrapolationFunctionOrderBy, extrapolationFunctionSkip: Int, extrapolationFunctionTake: Int, extrapolationFunctionWhere: ExtrapolationFunctionWhere): ExtrapolationFunctionModel!
  floorPlanSubscription(floorPlanOrderBy: FloorPlanOrderBy, floorPlanSkip: Int, floorPlanTake: Int, floorPlanWhere: FloorPlanWhere): FloorPlanModel!
  mainDeviceClassSubscription(mainDeviceClassOrderBy: MainDeviceClassOrderBy, mainDeviceClassSkip: Int, mainDeviceClassTake: Int, mainDeviceClassWhere: MainDeviceClassWhere): MainDeviceClassModel!
  mainDeviceInstanceSubscription(mainDeviceInstanceOrderBy: MainDeviceInstanceOrderBy, mainDeviceInstanceSkip: Int, mainDeviceInstanceTake: Int, mainDeviceInstanceWhere: MainDeviceInstanceWhere): MainDeviceInstanceModel!
  maintenanceAlarmConfigSubscription(maintenanceAlarmConfigOrderBy: MaintenanceAlarmConfigOrderBy, maintenanceAlarmConfigSkip: Int, maintenanceAlarmConfigTake: Int, maintenanceAlarmConfigWhere: MaintenanceAlarmConfigWhere): MaintenanceAlarmConfigModel!
  maintenanceConfigSubscription(maintenanceConfigOrderBy: MaintenanceConfigOrderBy, maintenanceConfigSkip: Int, maintenanceConfigTake: Int, maintenanceConfigWhere: MaintenanceConfigWhere): MaintenanceConfigModel!
  maintenanceSubscription(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!
  maintenanceTypeSubscription(maintenanceTypeOrderBy: MaintenanceTypeOrderBy, maintenanceTypeSkip: Int, maintenanceTypeTake: Int, maintenanceTypeWhere: MaintenanceTypeWhere): MaintenanceTypeModel!
  performanceIndicatorConfigSubscription(performanceIndicatorConfigOrderBy: PerformanceIndicatorConfigOrderBy, performanceIndicatorConfigSkip: Int, performanceIndicatorConfigTake: Int, performanceIndicatorConfigWhere: PerformanceIndicatorConfigWhere): PerformanceIndicatorConfigModel!
  predictionConfigSubscription(predictionConfigOrderBy: PredictionConfigOrderBy, predictionConfigSkip: Int, predictionConfigTake: Int, predictionConfigWhere: PredictionConfigWhere): PredictionConfigModel!
  privilegeSubscription(privilegeOrderBy: PrivilegeOrderBy, privilegeSkip: Int, privilegeTake: Int, privilegeWhere: PrivilegeWhere): PrivilegeModel!
  processDataConditionSubscription(processDataConditionOrderBy: ProcessDataConditionOrderBy, processDataConditionSkip: Int, processDataConditionTake: Int, processDataConditionWhere: ProcessDataConditionWhere): ProcessDataConditionModel!
  processDataModeSubscription(processDataModeOrderBy: ProcessDataModeOrderBy, processDataModeSkip: Int, processDataModeTake: Int, processDataModeWhere: ProcessDataModeWhere): ProcessDataModeModel!
  processDataSubscription(processDataOrderBy: ProcessDataOrderBy, processDataSkip: Int, processDataTake: Int, processDataWhere: ProcessDataWhere): ProcessDataModel!
  registrationStatusSubscription(registrationStatusOrderBy: RegistrationStatusOrderBy, registrationStatusSkip: Int, registrationStatusTake: Int, registrationStatusWhere: RegistrationStatusWhere): RegistrationStatusModel!
  replayConfigSubscription(replayConfigOrderBy: ReplayConfigOrderBy, replayConfigSkip: Int, replayConfigTake: Int, replayConfigWhere: ReplayConfigWhere): ReplayConfigModel!
  replayDataSubscription(replayDataOrderBy: ReplayDataOrderBy, replayDataSkip: Int, replayDataTake: Int, replayDataWhere: ReplayDataWhere): ReplayDataModel!
  replaySetSubscription(replaySetOrderBy: ReplaySetOrderBy, replaySetSkip: Int, replaySetTake: Int, replaySetWhere: ReplaySetWhere): ReplaySetModel!
  reportTypeSubscription(reportTypeOrderBy: ReportTypeOrderBy, reportTypeSkip: Int, reportTypeTake: Int, reportTypeWhere: ReportTypeWhere): ReportTypeModel!
  reportingConfigSubscription(reportingConfigOrderBy: ReportingConfigOrderBy, reportingConfigSkip: Int, reportingConfigTake: Int, reportingConfigWhere: ReportingConfigWhere): ReportingConfigModel!
  reportingSubscription(reportingOrderBy: ReportingOrderBy, reportingSkip: Int, reportingTake: Int, reportingWhere: ReportingWhere): ReportingModel!
  representationSubscription(representationOrderBy: RepresentationOrderBy, representationSkip: Int, representationTake: Int, representationWhere: RepresentationWhere): RepresentationModel!
  rolePrivilegeSubscription(rolePrivilegeOrderBy: RolePrivilegeOrderBy, rolePrivilegeSkip: Int, rolePrivilegeTake: Int, rolePrivilegeWhere: RolePrivilegeWhere): RolePrivilegeModel!
  roleSubscription(roleOrderBy: RoleOrderBy, roleSkip: Int, roleTake: Int, roleWhere: RoleWhere): RoleModel!
  softwareAdapterSubscription(softwareAdapterOrderBy: SoftwareAdapterOrderBy, softwareAdapterSkip: Int, softwareAdapterTake: Int, softwareAdapterWhere: SoftwareAdapterWhere): SoftwareAdapterModel!
  taskSubscription(taskOrderBy: TaskOrderBy, taskSkip: Int, taskTake: Int, taskWhere: TaskWhere): TaskModel!
  timeseriesDataHourAggregateSubscription(timeseriesDataHourAggregateOrderBy: TimeseriesDataHourAggregateOrderBy, timeseriesDataHourAggregateSkip: Int, timeseriesDataHourAggregateTake: Int, timeseriesDataHourAggregateWhere: TimeseriesDataHourAggregateWhere): TimeseriesDataHourAggregateModel!
  timeseriesDataSubscription(timeseriesDataOrderBy: TimeseriesDataOrderBy, timeseriesDataSkip: Int, timeseriesDataTake: Int, timeseriesDataWhere: TimeseriesDataWhere): TimeseriesDataModel!
  timeseriesSubscription(timeseriesOrderBy: TimeseriesOrderBy, timeseriesSkip: Int, timeseriesTake: Int, timeseriesWhere: TimeseriesWhere): TimeseriesModel!
  updaterConfigSubscription(updaterConfigOrderBy: UpdaterConfigOrderBy, updaterConfigSkip: Int, updaterConfigTake: Int, updaterConfigWhere: UpdaterConfigWhere): UpdaterConfigModel!
  userRoleSubscription(userRoleOrderBy: UserRoleOrderBy, userRoleSkip: Int, userRoleTake: Int, userRoleWhere: UserRoleWhere): UserRoleModel!
  userSubscription(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): UserModel!
  vendorSubscription(vendorOrderBy: VendorOrderBy, vendorSkip: Int, vendorTake: Int, vendorWhere: VendorWhere): VendorModel!
  xConfigSubscription(xConfigOrderBy: XConfigOrderBy, xConfigSkip: Int, xConfigTake: Int, xConfigWhere: XConfigWhere): XConfigModel!
}

type Task {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  firstSendDate: DateTime!
  frequency: String
  id: Int!
  reportOptions: String
  reportType(reportTypeOrderBy: ReportTypeOrderBy, reportTypeSkip: Int, reportTypeTake: Int, reportTypeWhere: ReportTypeWhere): ReportType
  reportTypeId: Int
  role(roleOrderBy: RoleOrderBy, roleSkip: Int, roleTake: Int, roleWhere: RoleWhere): Role
  roleId: Int
}

"""Should be array with at least one of the values mentioned bellow."""
enum TaskGroupByEnum {
  firstSendDate
  id
}

input TaskInput {
  devId: Int
  firstSendDate: DateTime
  frequency: String
  id: Int
  reportOptions: String
  reportTypeId: Int
  roleId: Int
}

type TaskModel {
  count: Int!
  data: [Task!]!
}

input TaskOrderBy {
  devId: EnumAscDesc
  firstSendDate: EnumAscDesc
  frequency: EnumAscDesc
  id: EnumAscDesc
  reportOptions: EnumAscDesc
  reportTypeId: EnumAscDesc
  roleId: EnumAscDesc
}

type TaskPayload {
  devId: Int
  firstSendDate: DateTime!
  frequency: String
  id: Int!
  reportOptions: String
  reportTypeId: Int
  roleId: Int
}

input TaskWhere {
  devId: WhereInt
  firstSendDate: WhereDateTime
  frequency: WhereString
  id: WhereInt
  reportOptions: WhereString
  reportTypeId: WhereInt
  roleId: WhereInt
}

type Timeseries {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  name: String
  timeseriesData(timeseriesDataOrderBy: TimeseriesDataOrderBy, timeseriesDataSkip: Int, timeseriesDataTake: Int, timeseriesDataWhere: TimeseriesDataWhere): TimeseriesDataModel!
}

type TimeseriesData {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  timeseries(timeseriesOrderBy: TimeseriesOrderBy, timeseriesSkip: Int, timeseriesTake: Int, timeseriesWhere: TimeseriesWhere): Timeseries
  timeseriesId: Int
  timestampStart: DateTime!
  value: Decimal
}

"""Should be array with at least one of the values mentioned bellow."""
enum TimeseriesDataGroupByEnum {
  id
  timestampStart
}

type TimeseriesDataHourAggregate {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  timeseriesId: Int
  timestamp: DateTime!
  value: Int
}

"""Should be array with at least one of the values mentioned bellow."""
enum TimeseriesDataHourAggregateGroupByEnum {
  id
  timestamp
}

input TimeseriesDataHourAggregateInput {
  devId: Int
  id: Int
  timeseriesId: Int
  timestamp: DateTime
  value: Int
}

type TimeseriesDataHourAggregateModel {
  count: Int!
  data: [TimeseriesDataHourAggregate!]!
}

input TimeseriesDataHourAggregateOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  timeseriesId: EnumAscDesc
  timestamp: EnumAscDesc
  value: EnumAscDesc
}

type TimeseriesDataHourAggregatePayload {
  devId: Int
  id: Int!
  timeseriesId: Int
  timestamp: DateTime!
  value: Int
}

input TimeseriesDataHourAggregateWhere {
  devId: WhereInt
  id: WhereInt
  timeseriesId: WhereInt
  timestamp: WhereDateTime
  value: WhereInt
}

input TimeseriesDataInput {
  devId: Int
  id: Int
  timeseriesId: Int
  timestampStart: DateTime
  value: Decimal
}

type TimeseriesDataModel {
  count: Int!
  data: [TimeseriesData!]!
}

input TimeseriesDataOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  timeseriesId: EnumAscDesc
  timestampStart: EnumAscDesc
  value: EnumAscDesc
}

type TimeseriesDataPayload {
  devId: Int
  id: Int!
  timeseriesId: Int
  timestampStart: DateTime!
  value: Decimal
}

input TimeseriesDataWhere {
  devId: WhereInt
  id: WhereInt
  timeseriesId: WhereInt
  timestampStart: WhereDateTime
  value: WhereString
}

"""Should be array with at least one of the values mentioned bellow."""
enum TimeseriesGroupByEnum {
  id
}

input TimeseriesInput {
  devId: Int
  id: Int
  name: String
}

type TimeseriesModel {
  count: Int!
  data: [Timeseries!]!
}

input TimeseriesOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  name: EnumAscDesc
}

type TimeseriesPayload {
  devId: Int
  id: Int!
  name: String
}

input TimeseriesWhere {
  devId: WhereInt
  id: WhereInt
  name: WhereString
}

type UpdaterConfig {
  devId: Int
  deviceInstance(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  indices: String
  interval: Int
}

"""Should be array with at least one of the values mentioned bellow."""
enum UpdaterConfigGroupByEnum {
  id
}

input UpdaterConfigInput {
  devId: Int
  id: Int
  indices: String
  interval: Int
}

type UpdaterConfigModel {
  count: Int!
  data: [UpdaterConfig!]!
}

input UpdaterConfigOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
  indices: EnumAscDesc
  interval: EnumAscDesc
}

type UpdaterConfigPayload {
  devId: Int
  id: Int!
  indices: String
  interval: Int
}

input UpdaterConfigWhere {
  devId: WhereInt
  id: WhereInt
  indices: WhereString
  interval: WhereInt
}

type User {
  activeEventInstances(activeEventInstanceOrderBy: ActiveEventInstanceOrderBy, activeEventInstanceSkip: Int, activeEventInstanceTake: Int, activeEventInstanceWhere: ActiveEventInstanceWhere): ActiveEventInstanceModel!
  assignedMaintenances(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!
  deviceInstances(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstanceModel!
  email: String
  eventInstances(eventInstanceOrderBy: EventInstanceOrderBy, eventInstanceSkip: Int, eventInstanceTake: Int, eventInstanceWhere: EventInstanceWhere): EventInstanceModel!
  firstname: String
  fixedMaintenances(maintenanceOrderBy: MaintenanceOrderBy, maintenanceSkip: Int, maintenanceTake: Int, maintenanceWhere: MaintenanceWhere): MaintenanceModel!
  id: Int!
  lastname: String
  system: Boolean
  user: String
  userRoles(userRoleOrderBy: UserRoleOrderBy, userRoleSkip: Int, userRoleTake: Int, userRoleWhere: UserRoleWhere): UserRoleModel!
}

"""Should be array with at least one of the values mentioned bellow."""
enum UserGroupByEnum {
  id
}

input UserInput {
  email: String
  firstname: String
  id: Int
  lastname: String
  password: String
  system: Boolean
  user: String
}

type UserModel {
  count: Int!
  data: [User!]!
}

input UserOrderBy {
  email: EnumAscDesc
  firstname: EnumAscDesc
  id: EnumAscDesc
  lastname: EnumAscDesc
  password: EnumAscDesc
  user: EnumAscDesc
}

type UserPayload {
  email: String
  firstname: String
  id: Int!
  lastname: String
  password: String
  system: Boolean
  user: String
}

type UserRole {
  id: Int!
  roleId: Int
  roles(roleOrderBy: RoleOrderBy, roleSkip: Int, roleTake: Int, roleWhere: RoleWhere): Role
  user(userOrderBy: UserOrderBy, userSkip: Int, userTake: Int, userWhere: UserWhere): User
  userId: Int
}

"""Should be array with at least one of the values mentioned bellow."""
enum UserRoleGroupByEnum {
  id
}

input UserRoleInput {
  id: Int
  roleId: Int
  userId: Int
}

type UserRoleModel {
  count: Int!
  data: [UserRole!]!
}

input UserRoleOrderBy {
  id: EnumAscDesc
  roleId: EnumAscDesc
  userId: EnumAscDesc
}

type UserRolePayload {
  id: Int!
  roleId: Int
  userId: Int
}

input UserRoleWhere {
  id: WhereInt
  roleId: WhereInt
  userId: WhereInt
}

input UserWhere {
  email: WhereString
  firstname: WhereString
  id: WhereInt
  lastname: WhereString
  password: WhereString
  system: Boolean
  user: WhereString
}

type Vendor {
  deviceClasses(deviceClassOrderBy: DeviceClassOrderBy, deviceClassSkip: Int, deviceClassTake: Int, deviceClassWhere: DeviceClassWhere): DeviceClassModel!
  id: BigIntString!
  logo: String
  name: String
  softwareAdapters(softwareAdapterOrderBy: SoftwareAdapterOrderBy, softwareAdapterSkip: Int, softwareAdapterTake: Int, softwareAdapterWhere: SoftwareAdapterWhere): SoftwareAdapterModel!
  text: String
  url: String
}

"""Should be array with at least one of the values mentioned bellow."""
enum VendorGroupByEnum {
  id
}

input VendorInput {
  id: BigIntString
  logo: String
  name: String
  text: String
  url: String
}

type VendorModel {
  count: Int!
  data: [Vendor!]!
}

input VendorOrderBy {
  logo: EnumAscDesc
  name: EnumAscDesc
  text: EnumAscDesc
  url: EnumAscDesc
}

type VendorPayload {
  id: BigIntString!
  logo: String
  name: String
  text: String
  url: String
}

input VendorWhere {
  id: BigIntString
  logo: WhereString
  name: WhereString
  text: WhereString
  url: WhereString
}

input WhereDateTime {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime]
}

input WhereInt {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int]
}

input WhereString {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: String
  notIn: [String]
  startsWith: String
}

type XConfig {
  automaticReadForEvents: Boolean
  automaticReadForReporting: Boolean
  devId: Int
  deviceInstances(deviceInstanceOrderBy: DeviceInstanceOrderBy, deviceInstanceSkip: Int, deviceInstanceTake: Int, deviceInstanceWhere: DeviceInstanceWhere): DeviceInstance
  id: Int!
  valueMap: JSON
}

"""Should be array with at least one of the values mentioned bellow."""
enum XConfigGroupByEnum {
  id
}

input XConfigInput {
  automaticReadForEvents: Boolean
  automaticReadForReporting: Boolean
  devId: Int
  id: Int
  valueMap: JSON
}

type XConfigModel {
  count: Int!
  data: [XConfig!]!
}

input XConfigOrderBy {
  devId: EnumAscDesc
  id: EnumAscDesc
}

type XConfigPayload {
  automaticReadForEvents: Boolean
  automaticReadForReporting: Boolean
  devId: Int
  id: Int!
  valueMap: JSON
}

input XConfigWhere {
  automaticReadForEvents: Boolean
  automaticReadForReporting: Boolean
  devId: WhereInt
  id: WhereInt
  valueMap: JSON
}